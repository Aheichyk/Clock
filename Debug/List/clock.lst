
AVRASM ver. 2.1.30  C:\cvavr\Projects\clock\Debug\List\clock.asm Fri Jan 17 21:55:34 2020

C:\cvavr\Projects\clock\Debug\List\clock.asm(1086): warning: Register r5 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1088): warning: Register r7 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1090): warning: Register r9 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1092): warning: Register r11 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1093): warning: Register r12 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1094): warning: Register r13 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1095): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hour=R5
                 	.DEF _min=R4
                 	.DEF _sec=R7
                 	.DEF _week=R6
                 	.DEF _day=R9
                 	.DEF _mon=R8
                 	.DEF _year=R11
                 	.DEF _bt_set=R12
                 	.DEF _bt_set_msb=R13
                 	.DEF _set_mode=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c040      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c0fd      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G101:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
00001e 6553
00001f 3a74
000020 6f6d
000021 6564      	.DB  0x53,0x65,0x74,0x3A,0x6D,0x6F,0x64,0x65
000022 253a
000023 0d64
000024 5300
000025 7465      	.DB  0x3A,0x25,0x64,0xD,0x0,0x53,0x65,0x74
000026 7075
000027 000d
000028 2577
000029 5f64      	.DB  0x75,0x70,0xD,0x0,0x77,0x25,0x64,0x5F
00002a 6425
00002b 253a
00002c 3a64
00002d 6425      	.DB  0x25,0x64,0x3A,0x25,0x64,0x3A,0x25,0x64
00002e 000d
00002f 6573
000030 5f74
000031 6f6d      	.DB  0xD,0x0,0x73,0x65,0x74,0x5F,0x6D,0x6F
000032 6564
000033 253a
000034 3a64
000035 7720      	.DB  0x64,0x65,0x3A,0x25,0x64,0x3A,0x20,0x77
000036 6425
000037 255f
000038 3a64
000039 6425      	.DB  0x25,0x64,0x5F,0x25,0x64,0x3A,0x25,0x64
00003a 253a
00003b 0d64
C:\cvavr\Projects\clock\Debug\List\clock.asm(1142): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x3A,0x25,0x64,0xD,0x0
                 
                 __GLOBAL_INI_TBL:
00003d 0004      	.DW  0x04
00003e 000a      	.DW  0x0A
00003f 0038      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c c10d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned char hour,min,sec,week,day,mon,year;
                 ;unsigned int bt_set=0;
                 ;unsigned int get_time=0;
                 ;unsigned char set_mode=0;
                 ;unsigned char set;
                 ;unsigned char mode;
                 ;unsigned char ring;
                 ;unsigned char ring_disp=0;
                 ;
                 ;void set_button() {
                 ; 0000 0016 void set_button() {
                 
                 	.CSEG
                 _set_button:
                 ; .FSTART _set_button
                 ; 0000 0017     // Long & One touch
                 ; 0000 0018     printf("Set:mode:%d\r",set_mode);
                +
00006d e3ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00006e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00006f d33c      	RCALL SUBOPT_0x0
000070 d33e      	RCALL SUBOPT_0x1
000071 e084      	LDI  R24,4
000072 d2ed      	RCALL _printf
000073 9626      	ADIW R28,6
                 ; 0000 0019     if (set_mode==1) {
000074 e0e1      	LDI  R30,LOW(1)
000075 15ea      	CP   R30,R10
000076 f431      	BRNE _0x3
                 ; 0000 001A         hour++;
000077 9453      	INC  R5
                 ; 0000 001B         if (hour > 23) hour=0;
000078 e1e7      	LDI  R30,LOW(23)
000079 15e5      	CP   R30,R5
00007a f408      	BRSH _0x4
00007b 2455      	CLR  R5
                 ; 0000 001C     } else if (set_mode==2) {
                 _0x4:
00007c c01b      	RJMP _0x5
                 _0x3:
00007d e0e2      	LDI  R30,LOW(2)
00007e 15ea      	CP   R30,R10
00007f f431      	BRNE _0x6
                 ; 0000 001D         min++;
000080 9443      	INC  R4
                 ; 0000 001E         if (min > 59)  min=0;
000081 e3eb      	LDI  R30,LOW(59)
000082 15e4      	CP   R30,R4
000083 f408      	BRSH _0x7
000084 2444      	CLR  R4
                 ; 0000 001F     } else if (set_mode==3) {
                 _0x7:
000085 c012      	RJMP _0x8
                 _0x6:
000086 e0e3      	LDI  R30,LOW(3)
000087 15ea      	CP   R30,R10
000088 f431      	BRNE _0x9
                 ; 0000 0020         sec++;
000089 9473      	INC  R7
                 ; 0000 0021         if (sec > 59) sec=0;
00008a e3eb      	LDI  R30,LOW(59)
00008b 15e7      	CP   R30,R7
00008c f408      	BRSH _0xA
00008d 2477      	CLR  R7
                 ; 0000 0022     } else if (set_mode==4) {
                 _0xA:
00008e c009      	RJMP _0xB
                 _0x9:
00008f e0e4      	LDI  R30,LOW(4)
000090 15ea      	CP   R30,R10
000091 f431      	BRNE _0xC
                 ; 0000 0023         week++;
000092 9463      	INC  R6
                 ; 0000 0024         if (week > 7) week=1;
000093 e0e7      	LDI  R30,LOW(7)
000094 15e6      	CP   R30,R6
000095 f410      	BRSH _0xD
000096 e0e1      	LDI  R30,LOW(1)
000097 2e6e      	MOV  R6,R30
                 ; 0000 0025     }
                 _0xD:
                 ; 0000 0026 }
                 _0xC:
                 _0xB:
                 _0x8:
                 _0x5:
000098 9508      	RET
                 ; .FEND
                 ;
                 ;void mode_button() {
                 ; 0000 0028 void mode_button() {
                 _mode_button:
                 ; .FSTART _mode_button
                 ; 0000 0029     // One touch
                 ; 0000 002A     printf("Setup\r");
                +
000099 e4e9     +LDI R30 , LOW ( 2 * _0x0 + ( 13 ) )
00009a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW1FN _0x0,13
00009b d310      	RCALL SUBOPT_0x0
00009c e080      	LDI  R24,0
00009d d2c2      	RCALL _printf
00009e 9622      	ADIW R28,2
                 ; 0000 002B     set_mode++; // Setup clock mode 0 - None,1-Hour,2-Min,3-Sec,4-Week
00009f 94a3      	INC  R10
                 ; 0000 002C     if (set_mode > 4) {
0000a0 e0e4      	LDI  R30,LOW(4)
0000a1 15ea      	CP   R30,R10
0000a2 f450      	BRSH _0xE
                 ; 0000 002D         set_mode=0;
0000a3 24aa      	CLR  R10
                 ; 0000 002E         rtc_set_time(hour,min,sec);
0000a4 925a      	ST   -Y,R5
0000a5 924a      	ST   -Y,R4
0000a6 2da7      	MOV  R26,R7
0000a7 d16b      	RCALL _rtc_set_time
                 ; 0000 002F         rtc_set_date(week,day,mon,year);
0000a8 926a      	ST   -Y,R6
0000a9 929a      	ST   -Y,R9
0000aa 928a      	ST   -Y,R8
0000ab 2dab      	MOV  R26,R11
0000ac d17f      	RCALL _rtc_set_date
                 ; 0000 0030     }
                 ; 0000 0031 }
                 _0xE:
0000ad 9508      	RET
                 ; .FEND
                 ;
                 ;void ring_button() {
                 ; 0000 0033 void ring_button() {
                 _ring_button:
                 ; .FSTART _ring_button
                 ; 0000 0034     // One touch
                 ; 0000 0035     ring_disp = !ring_disp; // Change display Time\Ring
0000ae d306      	RCALL SUBOPT_0x2
0000af d3fc      	RCALL __LNEGB1
0000b0 93e0 0165 	STS  _ring_disp,R30
                 ; 0000 0036     if (ring_disp) {
                 ; 0000 0037         // Read from EEPROM
                 ; 0000 0038     } else {
                 ; 0000 0039         // Write to EEPROM
                 ; 0000 003A     }
                 ; 0000 003B }
0000b2 9508      	RET
                 ; .FEND
                 ;
                 ;void display() {
                 ; 0000 003D void display() {
                 _display:
                 ; .FSTART _display
                 ; 0000 003E     static char symbol;
                 ; 0000 003F     symbol++;
0000b3 d304      	RCALL SUBOPT_0x3
0000b4 5fef      	SUBI R30,-LOW(1)
0000b5 93e0 0166 	STS  _symbol_S0000003000,R30
                 ; 0000 0040     if (symbol > 5) {
0000b7 d303      	RCALL SUBOPT_0x4
0000b8 30a6      	CPI  R26,LOW(0x6)
0000b9 f018      	BRLO _0x11
                 ; 0000 0041         symbol = 0;
0000ba e0e0      	LDI  R30,LOW(0)
0000bb 93e0 0166 	STS  _symbol_S0000003000,R30
                 ; 0000 0042     }
                 ; 0000 0043     //symbol = 5;
                 ; 0000 0044     // OFF display
                 ; 0000 0045     PORTD &= 0x03;
                 _0x11:
0000bd b3e2      	IN   R30,0x12
0000be 70e3      	ANDI R30,LOW(0x3)
0000bf bbe2      	OUT  0x12,R30
                 ; 0000 0046     PORTC &= 0xF0;
0000c0 b3e5      	IN   R30,0x15
0000c1 7fe0      	ANDI R30,LOW(0xF0)
0000c2 bbe5      	OUT  0x15,R30
                 ; 0000 0047     PORTB.7 = 1;
0000c3 9ac7      	SBI  0x18,7
                 ; 0000 0048 
                 ; 0000 0049     if (symbol == 0) {
0000c4 d2f3      	RCALL SUBOPT_0x3
0000c5 30e0      	CPI  R30,0
0000c6 f421      	BRNE _0x14
                 ; 0000 004A         PORTC |= (0x0F & (hour / 10));
0000c7 b365      	IN   R22,21
0000c8 2da5      	MOV  R26,R5
0000c9 d2f4      	RCALL SUBOPT_0x5
0000ca c02b      	RJMP _0x3D
                 ; 0000 004B     } else if (symbol == 1) {
                 _0x14:
0000cb d2ef      	RCALL SUBOPT_0x4
0000cc 30a1      	CPI  R26,LOW(0x1)
0000cd f459      	BRNE _0x16
                 ; 0000 004C         PORTC |= (0x0F & (hour % 10));
0000ce b365      	IN   R22,21
0000cf 2da5      	MOV  R26,R5
0000d0 27bb      	CLR  R27
0000d1 e0ea      	LDI  R30,LOW(10)
0000d2 e0f0      	LDI  R31,HIGH(10)
0000d3 d3f5      	RCALL __MODW21
0000d4 70ef      	ANDI R30,LOW(0xF)
0000d5 2be6      	OR   R30,R22
0000d6 bbe5      	OUT  0x15,R30
                 ; 0000 004D         PORTB.7 = 0;
0000d7 98c7      	CBI  0x18,7
                 ; 0000 004E     } else if (symbol == 2) {
0000d8 c020      	RJMP _0x19
                 _0x16:
0000d9 d2e1      	RCALL SUBOPT_0x4
0000da 30a2      	CPI  R26,LOW(0x2)
0000db f421      	BRNE _0x1A
                 ; 0000 004F         PORTC |= (0x0F & (min / 10));
0000dc b365      	IN   R22,21
0000dd 2da4      	MOV  R26,R4
0000de d2df      	RCALL SUBOPT_0x5
0000df c016      	RJMP _0x3D
                 ; 0000 0050     } else if (symbol == 3) {
                 _0x1A:
0000e0 d2da      	RCALL SUBOPT_0x4
0000e1 30a3      	CPI  R26,LOW(0x3)
0000e2 f419      	BRNE _0x1C
                 ; 0000 0051         PORTC |= (0x0F & (min % 10));
0000e3 b365      	IN   R22,21
0000e4 2da4      	MOV  R26,R4
0000e5 c00c      	RJMP _0x3E
                 ; 0000 0052     } else if (symbol == 4) {
                 _0x1C:
0000e6 d2d4      	RCALL SUBOPT_0x4
0000e7 30a4      	CPI  R26,LOW(0x4)
0000e8 f421      	BRNE _0x1E
                 ; 0000 0053         PORTC |= (0x0F & (sec / 10));
0000e9 b365      	IN   R22,21
0000ea 2da7      	MOV  R26,R7
0000eb d2d2      	RCALL SUBOPT_0x5
0000ec c009      	RJMP _0x3D
                 ; 0000 0054     } else if (symbol == 5) {
                 _0x1E:
0000ed d2cd      	RCALL SUBOPT_0x4
0000ee 30a5      	CPI  R26,LOW(0x5)
0000ef f449      	BRNE _0x20
                 ; 0000 0055         PORTC |= (0x0F & (sec % 10));
0000f0 b365      	IN   R22,21
0000f1 2da7      	MOV  R26,R7
                 _0x3E:
0000f2 27bb      	CLR  R27
0000f3 e0ea      	LDI  R30,LOW(10)
0000f4 e0f0      	LDI  R31,HIGH(10)
0000f5 d3d3      	RCALL __MODW21
                 _0x3D:
0000f6 70ef      	ANDI R30,LOW(0xF)
0000f7 2be6      	OR   R30,R22
0000f8 bbe5      	OUT  0x15,R30
                 ; 0000 0056     }
                 ; 0000 0057 
                 ; 0000 0058     if (ring_disp) {
                 _0x20:
                 _0x19:
0000f9 d2bb      	RCALL SUBOPT_0x2
0000fa 30e0      	CPI  R30,0
0000fb f029      	BREQ _0x21
                 ; 0000 0059         if (symbol < 4) {
0000fc d2be      	RCALL SUBOPT_0x4
0000fd 30a4      	CPI  R26,LOW(0x4)
0000fe f408      	BRSH _0x22
                 ; 0000 005A             PORTD |= (1 << (2 + symbol));
0000ff d2c3      	RCALL SUBOPT_0x6
                 ; 0000 005B         }
                 ; 0000 005C     } else {
                 _0x22:
000100 c005      	RJMP _0x23
                 _0x21:
                 ; 0000 005D         PORTD |= (1 << (2 + symbol));
000101 d2c1      	RCALL SUBOPT_0x6
                 ; 0000 005E         if (symbol == 3) PORTB.7 = 0;
000102 d2b8      	RCALL SUBOPT_0x4
000103 30a3      	CPI  R26,LOW(0x3)
000104 f409      	BRNE _0x24
000105 98c7      	CBI  0x18,7
                 ; 0000 005F     }
                 _0x24:
                 _0x23:
                 ; 0000 0060 }
000106 9508      	RET
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0063 interrupt [10] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000107 920a      	ST   -Y,R0
000108 921a      	ST   -Y,R1
000109 92fa      	ST   -Y,R15
00010a 936a      	ST   -Y,R22
00010b 937a      	ST   -Y,R23
00010c 938a      	ST   -Y,R24
00010d 939a      	ST   -Y,R25
00010e 93aa      	ST   -Y,R26
00010f 93ba      	ST   -Y,R27
000110 93ea      	ST   -Y,R30
000111 93fa      	ST   -Y,R31
000112 b7ef      	IN   R30,SREG
000113 93ea      	ST   -Y,R30
                 ; 0000 0064     // Reinitialize Timer 0 value
                 ; 0000 0065     TCNT0=0x83;
000114 e8e3      	LDI  R30,LOW(131)
000115 bfe2      	OUT  0x32,R30
                 ; 0000 0066     // Place your code here
                 ; 0000 0067     // Read timeout
                 ; 0000 0068     if (get_time > 0) get_time--;
000116 91a0 0160 	LDS  R26,_get_time
000118 91b0 0161 	LDS  R27,_get_time+1
00011a d3d7      	RCALL __CPW02
00011b f438      	BRSH _0x27
00011c e6a0      	LDI  R26,LOW(_get_time)
00011d e0b1      	LDI  R27,HIGH(_get_time)
00011e 91ed      	LD   R30,X+
00011f 91fd      	LD   R31,X+
000120 9731      	SBIW R30,1
000121 93fe      	ST   -X,R31
000122 93ee      	ST   -X,R30
                 ; 0000 0069     // One touch
                 ; 0000 006A     if (PINB.0 != set) {
                 _0x27:
000123 e0a0      	LDI  R26,0
000124 99b0      	SBIC 0x16,0
000125 e0a1      	LDI  R26,1
000126 91e0 0162 	LDS  R30,_set
000128 d2a2      	RCALL SUBOPT_0x7
000129 f031      	BREQ _0x28
                 ; 0000 006B         if (!set) {
00012a 91e0 0162 	LDS  R30,_set
00012c 30e0      	CPI  R30,0
00012d f409      	BRNE _0x29
                 ; 0000 006C             // Button released
                 ; 0000 006D             set_button();
00012e df3e      	RCALL _set_button
                 ; 0000 006E         }
                 ; 0000 006F         set = PINB.0;
                 _0x29:
00012f d2a2      	RCALL SUBOPT_0x8
                 ; 0000 0070     }
                 ; 0000 0071     // Long touch
                 ; 0000 0072     if (PINB.0 == 0) {
                 _0x28:
000130 99b0      	SBIC 0x16,0
000131 c00d      	RJMP _0x2A
                 ; 0000 0073         bt_set++;
000132 01f6      	MOVW R30,R12
000133 9631      	ADIW R30,1
000134 016f      	MOVW R12,R30
                 ; 0000 0074         if (bt_set > 1500) {
000135 edec      	LDI  R30,LOW(1500)
000136 e0f5      	LDI  R31,HIGH(1500)
000137 15ec      	CP   R30,R12
000138 05fd      	CPC  R31,R13
000139 f420      	BRSH _0x2B
                 ; 0000 0075             bt_set = 1000;
00013a eee8      	LDI  R30,LOW(1000)
00013b e0f3      	LDI  R31,HIGH(1000)
00013c 016f      	MOVW R12,R30
                 ; 0000 0076             set_button();
00013d df2f      	RCALL _set_button
                 ; 0000 0077         }
                 ; 0000 0078     } else bt_set = 0;
                 _0x2B:
00013e c002      	RJMP _0x2C
                 _0x2A:
00013f 24cc      	CLR  R12
000140 24dd      	CLR  R13
                 ; 0000 0079     // One touch
                 ; 0000 007A     if (PINB.1 != mode) {
                 _0x2C:
000141 e0a0      	LDI  R26,0
000142 99b1      	SBIC 0x16,1
000143 e0a1      	LDI  R26,1
000144 91e0 0163 	LDS  R30,_mode
000146 d284      	RCALL SUBOPT_0x7
000147 f031      	BREQ _0x2D
                 ; 0000 007B         if (!mode) {
000148 91e0 0163 	LDS  R30,_mode
00014a 30e0      	CPI  R30,0
00014b f409      	BRNE _0x2E
                 ; 0000 007C             // Button released
                 ; 0000 007D             mode_button();
00014c df4c      	RCALL _mode_button
                 ; 0000 007E         }
                 ; 0000 007F         mode = PINB.1;
                 _0x2E:
00014d d28a      	RCALL SUBOPT_0x9
                 ; 0000 0080     }
                 ; 0000 0081     // One touch
                 ; 0000 0082     if (PINB.2 != ring) {
                 _0x2D:
00014e e0a0      	LDI  R26,0
00014f 99b2      	SBIC 0x16,2
000150 e0a1      	LDI  R26,1
000151 91e0 0164 	LDS  R30,_ring
000153 d277      	RCALL SUBOPT_0x7
000154 f031      	BREQ _0x2F
                 ; 0000 0083         if (!ring) {
000155 91e0 0164 	LDS  R30,_ring
000157 30e0      	CPI  R30,0
000158 f409      	BRNE _0x30
                 ; 0000 0084             // Button released
                 ; 0000 0085             ring_button();
000159 df54      	RCALL _ring_button
                 ; 0000 0086         }
                 ; 0000 0087         ring = PINB.2;
                 _0x30:
00015a d283      	RCALL SUBOPT_0xA
                 ; 0000 0088     }
                 ; 0000 0089     // Display  4ms - one symbol
                 ; 0000 008A     static char disp;
                 _0x2F:
                 ; 0000 008B     disp++;
00015b 91e0 0167 	LDS  R30,_disp_S0000004000
00015d 5fef      	SUBI R30,-LOW(1)
00015e 93e0 0167 	STS  _disp_S0000004000,R30
                 ; 0000 008C     if (disp > 3) disp = 0;
000160 91a0 0167 	LDS  R26,_disp_S0000004000
000162 30a4      	CPI  R26,LOW(0x4)
000163 f018      	BRLO _0x31
000164 e0e0      	LDI  R30,LOW(0)
000165 93e0 0167 	STS  _disp_S0000004000,R30
                 ; 0000 008D     if (disp == 0) display();
                 _0x31:
000167 91e0 0167 	LDS  R30,_disp_S0000004000
000169 30e0      	CPI  R30,0
00016a f409      	BRNE _0x32
00016b df47      	RCALL _display
                 ; 0000 008E }
                 _0x32:
00016c 91e9      	LD   R30,Y+
00016d bfef      	OUT  SREG,R30
00016e 91f9      	LD   R31,Y+
00016f 91e9      	LD   R30,Y+
000170 91b9      	LD   R27,Y+
000171 91a9      	LD   R26,Y+
000172 9199      	LD   R25,Y+
000173 9189      	LD   R24,Y+
000174 9179      	LD   R23,Y+
000175 9169      	LD   R22,Y+
000176 90f9      	LD   R15,Y+
000177 9019      	LD   R1,Y+
000178 9009      	LD   R0,Y+
000179 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0091 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0092 // Declare your local variables here
                 ; 0000 0093 
                 ; 0000 0094 // Input/Output Ports initialization
                 ; 0000 0095 // Port B initialization
                 ; 0000 0096 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0097 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00017a efe8      	LDI  R30,LOW(248)
00017b bbe7      	OUT  0x17,R30
                 ; 0000 0098 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=1 Bit0=1
                 ; 0000 0099 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
00017c e0e7      	LDI  R30,LOW(7)
00017d bbe8      	OUT  0x18,R30
                 ; 0000 009A 
                 ; 0000 009B // Port C initialization
                 ; 0000 009C // Function: Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 009D DDRC=(1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00017e e7ef      	LDI  R30,LOW(127)
00017f bbe4      	OUT  0x14,R30
                 ; 0000 009E // State: Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 009F PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000180 e0e0      	LDI  R30,LOW(0)
000181 bbe5      	OUT  0x15,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Port D initialization
                 ; 0000 00A2 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00A3 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000182 efef      	LDI  R30,LOW(255)
000183 bbe1      	OUT  0x11,R30
                 ; 0000 00A4 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00A5 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000184 e0e0      	LDI  R30,LOW(0)
000185 bbe2      	OUT  0x12,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // Timer/Counter 0 initialization
                 ; 0000 00A8 // Clock source: System Clock
                 ; 0000 00A9 // Clock value: 125,000 kHz
                 ; 0000 00AA TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
000186 e0e3      	LDI  R30,LOW(3)
000187 bfe3      	OUT  0x33,R30
                 ; 0000 00AB TCNT0=0x83;
000188 e8e3      	LDI  R30,LOW(131)
000189 bfe2      	OUT  0x32,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Timer/Counter 1 initialization
                 ; 0000 00AE // Clock source: System Clock
                 ; 0000 00AF // Clock value: Timer1 Stopped
                 ; 0000 00B0 // Mode: Normal top=0xFFFF
                 ; 0000 00B1 // OC1A output: Disconnected
                 ; 0000 00B2 // OC1B output: Disconnected
                 ; 0000 00B3 // Noise Canceler: Off
                 ; 0000 00B4 // Input Capture on Falling Edge
                 ; 0000 00B5 // Timer1 Overflow Interrupt: Off
                 ; 0000 00B6 // Input Capture Interrupt: Off
                 ; 0000 00B7 // Compare A Match Interrupt: Off
                 ; 0000 00B8 // Compare B Match Interrupt: Off
                 ; 0000 00B9 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00018a e0e0      	LDI  R30,LOW(0)
00018b bdef      	OUT  0x2F,R30
                 ; 0000 00BA TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00018c bdee      	OUT  0x2E,R30
                 ; 0000 00BB TCNT1H=0x00;
00018d bded      	OUT  0x2D,R30
                 ; 0000 00BC TCNT1L=0x00;
00018e bdec      	OUT  0x2C,R30
                 ; 0000 00BD ICR1H=0x00;
00018f bde7      	OUT  0x27,R30
                 ; 0000 00BE ICR1L=0x00;
000190 bde6      	OUT  0x26,R30
                 ; 0000 00BF OCR1AH=0x00;
000191 bdeb      	OUT  0x2B,R30
                 ; 0000 00C0 OCR1AL=0x00;
000192 bdea      	OUT  0x2A,R30
                 ; 0000 00C1 OCR1BH=0x00;
000193 bde9      	OUT  0x29,R30
                 ; 0000 00C2 OCR1BL=0x00;
000194 bde8      	OUT  0x28,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // Timer/Counter 2 initialization
                 ; 0000 00C5 // Clock source: System Clock
                 ; 0000 00C6 // Clock value: Timer2 Stopped
                 ; 0000 00C7 // Mode: Normal top=0xFF
                 ; 0000 00C8 // OC2 output: Disconnected
                 ; 0000 00C9 ASSR=0<<AS2;
000195 bde2      	OUT  0x22,R30
                 ; 0000 00CA TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000196 bde5      	OUT  0x25,R30
                 ; 0000 00CB TCNT2=0x00;
000197 bde4      	OUT  0x24,R30
                 ; 0000 00CC OCR2=0x00;
000198 bde3      	OUT  0x23,R30
                 ; 0000 00CD 
                 ; 0000 00CE // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00CF TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
000199 e0e1      	LDI  R30,LOW(1)
00019a bfe9      	OUT  0x39,R30
                 ; 0000 00D0 
                 ; 0000 00D1 
                 ; 0000 00D2 
                 ; 0000 00D3 // USART initialization
                 ; 0000 00D4 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00D5 // USART Receiver: Off
                 ; 0000 00D6 // USART Transmitter: On
                 ; 0000 00D7 // USART Mode: Asynchronous
                 ; 0000 00D8 // USART Baud Rate: 9600
                 ; 0000 00D9 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00019b e0e0      	LDI  R30,LOW(0)
00019c b9eb      	OUT  0xB,R30
                 ; 0000 00DA UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00019d e0e8      	LDI  R30,LOW(8)
00019e b9ea      	OUT  0xA,R30
                 ; 0000 00DB UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00019f e8e6      	LDI  R30,LOW(134)
0001a0 bde0      	OUT  0x20,R30
                 ; 0000 00DC UBRRH=0x00;
0001a1 e0e0      	LDI  R30,LOW(0)
0001a2 bde0      	OUT  0x20,R30
                 ; 0000 00DD UBRRL=0x33;
0001a3 e3e3      	LDI  R30,LOW(51)
0001a4 b9e9      	OUT  0x9,R30
                 ; 0000 00DE 
                 ; 0000 00DF 
                 ; 0000 00E0 
                 ; 0000 00E1 
                 ; 0000 00E2 
                 ; 0000 00E3 
                 ; 0000 00E4 // Bit-Banged I2C Bus initialization
                 ; 0000 00E5 // I2C Port: PORTC
                 ; 0000 00E6 // I2C SDA bit: 4
                 ; 0000 00E7 // I2C SCL bit: 5
                 ; 0000 00E8 // Bit Rate: 100 kHz
                 ; 0000 00E9 // Note: I2C settings are specified in the
                 ; 0000 00EA // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 00EB i2c_init();
0001a5 d2a5      	RCALL _i2c_init
                 ; 0000 00EC 
                 ; 0000 00ED // DS1307 Real Time Clock initialization
                 ; 0000 00EE // Square wave output on pin SQW/OUT: Off
                 ; 0000 00EF // SQW/OUT pin state: 0
                 ; 0000 00F0 rtc_init(0,0,0);
0001a6 e0e0      	LDI  R30,LOW(0)
0001a7 93ea      	ST   -Y,R30
0001a8 93ea      	ST   -Y,R30
0001a9 e0a0      	LDI  R26,LOW(0)
0001aa d041      	RCALL _rtc_init
                 ; 0000 00F1 
                 ; 0000 00F2 set = PINB.0;
0001ab d226      	RCALL SUBOPT_0x8
                 ; 0000 00F3 mode = PINB.1;
0001ac d22b      	RCALL SUBOPT_0x9
                 ; 0000 00F4 ring = PINB.2;
0001ad d230      	RCALL SUBOPT_0xA
                 ; 0000 00F5 
                 ; 0000 00F6 // Global enable interrupts
                 ; 0000 00F7 #asm("sei")
0001ae 9478      	sei
                 ; 0000 00F8 
                 ; 0000 00F9 while (1) {
                 _0x33:
                 ; 0000 00FA       // Place your code here
                 ; 0000 00FB       if (get_time == 0) {
0001af 91e0 0160 	LDS  R30,_get_time
0001b1 91f0 0161 	LDS  R31,_get_time+1
0001b3 9730      	SBIW R30,0
0001b4 f589      	BRNE _0x36
                 ; 0000 00FC             if (!set_mode && !ring_disp) {
0001b5 20aa      	TST  R10
0001b6 f419      	BRNE _0x38
0001b7 d1fd      	RCALL SUBOPT_0x2
0001b8 30e0      	CPI  R30,0
0001b9 f009      	BREQ _0x39
                 _0x38:
0001ba c01d      	RJMP _0x37
                 _0x39:
                 ; 0000 00FD                 rtc_get_time(&hour,&min,&sec);
0001bb e0e5      	LDI  R30,LOW(5)
0001bc e0f0      	LDI  R31,HIGH(5)
0001bd d1ee      	RCALL SUBOPT_0x0
0001be e0e4      	LDI  R30,LOW(4)
0001bf e0f0      	LDI  R31,HIGH(4)
0001c0 d1eb      	RCALL SUBOPT_0x0
0001c1 e0a7      	LDI  R26,LOW(7)
0001c2 e0b0      	LDI  R27,HIGH(7)
0001c3 d03e      	RCALL _rtc_get_time
                 ; 0000 00FE                 rtc_get_date(&week,&day,&mon,&year);
0001c4 e0e6      	LDI  R30,LOW(6)
0001c5 e0f0      	LDI  R31,HIGH(6)
0001c6 d1e5      	RCALL SUBOPT_0x0
0001c7 e0e9      	LDI  R30,LOW(9)
0001c8 e0f0      	LDI  R31,HIGH(9)
0001c9 d1e2      	RCALL SUBOPT_0x0
0001ca e0e8      	LDI  R30,LOW(8)
0001cb e0f0      	LDI  R31,HIGH(8)
0001cc d1df      	RCALL SUBOPT_0x0
0001cd e0ab      	LDI  R26,LOW(11)
0001ce e0b0      	LDI  R27,HIGH(11)
0001cf d04b      	RCALL _rtc_get_date
                 ; 0000 00FF                 printf("w%d_%d:%d:%d\r",week,hour,min,sec);
                +
0001d0 e5e0     +LDI R30 , LOW ( 2 * _0x0 + ( 20 ) )
0001d1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 20 ) )
                 	__POINTW1FN _0x0,20
0001d2 d1d9      	RCALL SUBOPT_0x0
0001d3 d210      	RCALL SUBOPT_0xB
0001d4 e180      	LDI  R24,16
0001d5 d18a      	RCALL _printf
0001d6 9662      	ADIW R28,18
                 ; 0000 0100             } else printf("set_mode:%d: w%d_%d:%d:%d\r",set_mode,week,hour,min,sec);
0001d7 c008      	RJMP _0x3A
                 _0x37:
                +
0001d8 e5ee     +LDI R30 , LOW ( 2 * _0x0 + ( 34 ) )
0001d9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW1FN _0x0,34
0001da d1d1      	RCALL SUBOPT_0x0
0001db d1d3      	RCALL SUBOPT_0x1
0001dc d207      	RCALL SUBOPT_0xB
0001dd e184      	LDI  R24,20
0001de d181      	RCALL _printf
0001df 9666      	ADIW R28,22
                 ; 0000 0101             get_time = 100; // 500*1ms = 500ms
                 _0x3A:
0001e0 e6e4      	LDI  R30,LOW(100)
0001e1 e0f0      	LDI  R31,HIGH(100)
0001e2 93e0 0160 	STS  _get_time,R30
0001e4 93f0 0161 	STS  _get_time+1,R31
                 ; 0000 0102             //display();
                 ; 0000 0103       }
                 ; 0000 0104       if (ring_disp) {
                 _0x36:
0001e6 d1ce      	RCALL SUBOPT_0x2
0001e7 30e0      	CPI  R30,0
0001e8 f009      	BREQ _0x3B
                 ; 0000 0105             sec = 0;
0001e9 2477      	CLR  R7
                 ; 0000 0106       }
                 ; 0000 0107       }
                 _0x3B:
0001ea cfc4      	RJMP _0x33
                 ; 0000 0108 }
                 _0x3C:
0001eb cfff      	RJMP _0x3C
                 ; .FEND
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
0001ec 93aa      	ST   -Y,R26
0001ed 81ea      	LDD  R30,Y+2
0001ee 70e3      	ANDI R30,LOW(0x3)
0001ef 83ea      	STD  Y+2,R30
0001f0 81e9      	LDD  R30,Y+1
0001f1 30e0      	CPI  R30,0
0001f2 f019      	BREQ _0x2000003
0001f3 81ea      	LDD  R30,Y+2
0001f4 61e0      	ORI  R30,0x10
0001f5 83ea      	STD  Y+2,R30
                 _0x2000003:
0001f6 81e8      	LD   R30,Y
0001f7 30e0      	CPI  R30,0
0001f8 f019      	BREQ _0x2000004
0001f9 81ea      	LDD  R30,Y+2
0001fa 68e0      	ORI  R30,0x80
0001fb 83ea      	STD  Y+2,R30
                 _0x2000004:
0001fc d1fc      	RCALL SUBOPT_0xC
0001fd e0a7      	LDI  R26,LOW(7)
0001fe d285      	RCALL _i2c_write
0001ff 81aa      	LDD  R26,Y+2
000200 d1fb      	RCALL SUBOPT_0xD
000201 c046      	RJMP _0x20A0001
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000202 93ba      	ST   -Y,R27
000203 93aa      	ST   -Y,R26
000204 d1f4      	RCALL SUBOPT_0xC
000205 e0a0      	LDI  R26,LOW(0)
000206 d1f5      	RCALL SUBOPT_0xD
000207 d1f6      	RCALL SUBOPT_0xE
000208 d1fa      	RCALL SUBOPT_0xF
000209 81a8      	LD   R26,Y
00020a 81b9      	LDD  R27,Y+1
00020b d1f9      	RCALL SUBOPT_0x10
00020c d1fc      	RCALL SUBOPT_0x11
00020d 81ac      	LDD  R26,Y+4
00020e 81bd      	LDD  R27,Y+4+1
00020f 93ec      	ST   X,R30
000210 d24e      	RCALL _i2c_stop
000211 9626      	ADIW R28,6
000212 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
000213 93aa      	ST   -Y,R26
000214 d1e4      	RCALL SUBOPT_0xC
000215 e0a0      	LDI  R26,LOW(0)
000216 d1f8      	RCALL SUBOPT_0x12
000217 d1fc      	RCALL SUBOPT_0x13
000218 d200      	RCALL SUBOPT_0x14
000219 d1e2      	RCALL SUBOPT_0xD
00021a c02d      	RJMP _0x20A0001
                 ; .FEND
                 _rtc_get_date:
                 ; .FSTART _rtc_get_date
00021b d202      	RCALL SUBOPT_0x15
00021c d1dc      	RCALL SUBOPT_0xC
00021d e0a3      	LDI  R26,LOW(3)
00021e d1dd      	RCALL SUBOPT_0xD
00021f d1de      	RCALL SUBOPT_0xE
000220 d200      	RCALL SUBOPT_0x16
000221 d1e3      	RCALL SUBOPT_0x10
000222 81ac      	LDD  R26,Y+4
000223 81bd      	LDD  R27,Y+4+1
000224 d1e0      	RCALL SUBOPT_0x10
000225 d1e3      	RCALL SUBOPT_0x11
000226 81a8      	LD   R26,Y
000227 81b9      	LDD  R27,Y+1
000228 93ec      	ST   X,R30
000229 d235      	RCALL _i2c_stop
00022a 9628      	ADIW R28,8
00022b 9508      	RET
                 ; .FEND
                 _rtc_set_date:
                 ; .FSTART _rtc_set_date
00022c 93aa      	ST   -Y,R26
00022d d1cb      	RCALL SUBOPT_0xC
00022e e0a3      	LDI  R26,LOW(3)
00022f d254      	RCALL _i2c_write
000230 81ab      	LDD  R26,Y+3
000231 d1e7      	RCALL SUBOPT_0x14
000232 d1e1      	RCALL SUBOPT_0x13
000233 d1db      	RCALL SUBOPT_0x12
000234 d1c7      	RCALL SUBOPT_0xD
000235 9624      	ADIW R28,4
000236 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000237 93aa      	ST   -Y,R26
                 putchar0:
000238 9b5d           sbis usr,udre
000239 cffe           rjmp putchar0
00023a 81e8           ld   r30,y
00023b b9ec           out  udr,r30
00023c 9621      	ADIW R28,1
00023d 9508      	RET
                 ; .FEND
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
00023e d1df      	RCALL SUBOPT_0x15
00023f 81aa      	LDD  R26,Y+2
000240 dff6      	RCALL _putchar
000241 81a8      	LD   R26,Y
000242 81b9      	LDD  R27,Y+1
000243 91ed      	LD   R30,X+
000244 91fd      	LD   R31,X+
000245 9631      	ADIW R30,1
000246 93fe      	ST   -X,R31
000247 93ee      	ST   -X,R30
                 _0x20A0001:
000248 9623      	ADIW R28,3
000249 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00024a d1d3      	RCALL SUBOPT_0x15
00024b 9726      	SBIW R28,6
00024c d2a9      	RCALL __SAVELOCR6
00024d e010      	LDI  R17,0
00024e 85ac      	LDD  R26,Y+12
00024f 85bd      	LDD  R27,Y+12+1
000250 e0e0      	LDI  R30,LOW(0)
000251 e0f0      	LDI  R31,HIGH(0)
000252 93ed      	ST   X+,R30
000253 93fc      	ST   X,R31
                 _0x2020016:
000254 89ea      	LDD  R30,Y+18
000255 89fb      	LDD  R31,Y+18+1
000256 9631      	ADIW R30,1
000257 8bea      	STD  Y+18,R30
000258 8bfb      	STD  Y+18+1,R31
000259 9731      	SBIW R30,1
00025a 91e4      	LPM  R30,Z
00025b 2f2e      	MOV  R18,R30
00025c 30e0      	CPI  R30,0
00025d f409      	BRNE PC+2
00025e c0fb      	RJMP _0x2020018
00025f 2fe1      	MOV  R30,R17
000260 30e0      	CPI  R30,0
000261 f431      	BRNE _0x202001C
000262 3225      	CPI  R18,37
000263 f411      	BRNE _0x202001D
000264 e011      	LDI  R17,LOW(1)
000265 c001      	RJMP _0x202001E
                 _0x202001D:
000266 d1bd      	RCALL SUBOPT_0x17
                 _0x202001E:
000267 c0f1      	RJMP _0x202001B
                 _0x202001C:
000268 30e1      	CPI  R30,LOW(0x1)
000269 f4a1      	BRNE _0x202001F
00026a 3225      	CPI  R18,37
00026b f411      	BRNE _0x2020020
00026c d1b7      	RCALL SUBOPT_0x17
00026d c0ea      	RJMP _0x20200CC
                 _0x2020020:
00026e e012      	LDI  R17,LOW(2)
00026f e040      	LDI  R20,LOW(0)
000270 e000      	LDI  R16,LOW(0)
000271 322d      	CPI  R18,45
000272 f411      	BRNE _0x2020021
000273 e001      	LDI  R16,LOW(1)
000274 c0e4      	RJMP _0x202001B
                 _0x2020021:
000275 322b      	CPI  R18,43
000276 f411      	BRNE _0x2020022
000277 e24b      	LDI  R20,LOW(43)
000278 c0e0      	RJMP _0x202001B
                 _0x2020022:
000279 3220      	CPI  R18,32
00027a f411      	BRNE _0x2020023
00027b e240      	LDI  R20,LOW(32)
00027c c0dc      	RJMP _0x202001B
                 _0x2020023:
00027d c002      	RJMP _0x2020024
                 _0x202001F:
00027e 30e2      	CPI  R30,LOW(0x2)
00027f f439      	BRNE _0x2020025
                 _0x2020024:
000280 e050      	LDI  R21,LOW(0)
000281 e013      	LDI  R17,LOW(3)
000282 3320      	CPI  R18,48
000283 f411      	BRNE _0x2020026
000284 6800      	ORI  R16,LOW(128)
000285 c0d3      	RJMP _0x202001B
                 _0x2020026:
000286 c003      	RJMP _0x2020027
                 _0x2020025:
000287 30e3      	CPI  R30,LOW(0x3)
000288 f009      	BREQ PC+2
000289 c0cf      	RJMP _0x202001B
                 _0x2020027:
00028a 3320      	CPI  R18,48
00028b f010      	BRLO _0x202002A
00028c 332a      	CPI  R18,58
00028d f008      	BRLO _0x202002B
                 _0x202002A:
00028e c007      	RJMP _0x2020029
                 _0x202002B:
00028f e0aa      	LDI  R26,LOW(10)
000290 9f5a      	MUL  R21,R26
000291 2d50      	MOV  R21,R0
000292 2fe2      	MOV  R30,R18
000293 53e0      	SUBI R30,LOW(48)
000294 0f5e      	ADD  R21,R30
000295 c0c3      	RJMP _0x202001B
                 _0x2020029:
000296 2fe2      	MOV  R30,R18
000297 36e3      	CPI  R30,LOW(0x63)
000298 f439      	BRNE _0x202002F
000299 d191      	RCALL SUBOPT_0x18
00029a d193      	RCALL SUBOPT_0x19
00029b d18f      	RCALL SUBOPT_0x18
00029c 81a4      	LDD  R26,Z+4
00029d 93aa      	ST   -Y,R26
00029e d193      	RCALL SUBOPT_0x1A
00029f c0b8      	RJMP _0x2020030
                 _0x202002F:
0002a0 37e3      	CPI  R30,LOW(0x73)
0002a1 f429      	BRNE _0x2020032
0002a2 d195      	RCALL SUBOPT_0x1B
0002a3 d196      	RCALL SUBOPT_0x1C
0002a4 d0f0      	RCALL _strlen
0002a5 2f1e      	MOV  R17,R30
0002a6 c007      	RJMP _0x2020033
                 _0x2020032:
0002a7 37e0      	CPI  R30,LOW(0x70)
0002a8 f449      	BRNE _0x2020035
0002a9 d18e      	RCALL SUBOPT_0x1B
0002aa d18f      	RCALL SUBOPT_0x1C
0002ab d0f4      	RCALL _strlenf
0002ac 2f1e      	MOV  R17,R30
0002ad 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002ae 6002      	ORI  R16,LOW(2)
0002af 770f      	ANDI R16,LOW(127)
0002b0 e030      	LDI  R19,LOW(0)
0002b1 c02d      	RJMP _0x2020036
                 _0x2020035:
0002b2 36e4      	CPI  R30,LOW(0x64)
0002b3 f011      	BREQ _0x2020039
0002b4 36e9      	CPI  R30,LOW(0x69)
0002b5 f411      	BRNE _0x202003A
                 _0x2020039:
0002b6 6004      	ORI  R16,LOW(4)
0002b7 c002      	RJMP _0x202003B
                 _0x202003A:
0002b8 37e5      	CPI  R30,LOW(0x75)
0002b9 f429      	BRNE _0x202003C
                 _0x202003B:
0002ba e2e6      	LDI  R30,LOW(_tbl10_G101*2)
0002bb e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002bc d184      	RCALL SUBOPT_0x1D
0002bd e015      	LDI  R17,LOW(5)
0002be c00b      	RJMP _0x202003D
                 _0x202003C:
0002bf 35e8      	CPI  R30,LOW(0x58)
0002c0 f411      	BRNE _0x202003F
0002c1 6008      	ORI  R16,LOW(8)
0002c2 c003      	RJMP _0x2020040
                 _0x202003F:
0002c3 37e8      	CPI  R30,LOW(0x78)
0002c4 f009      	BREQ PC+2
0002c5 c092      	RJMP _0x2020071
                 _0x2020040:
0002c6 e3e0      	LDI  R30,LOW(_tbl16_G101*2)
0002c7 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002c8 d178      	RCALL SUBOPT_0x1D
0002c9 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002ca ff02      	SBRS R16,2
0002cb c011      	RJMP _0x2020042
0002cc d16b      	RCALL SUBOPT_0x1B
0002cd d176      	RCALL SUBOPT_0x1E
0002ce 85ab      	LDD  R26,Y+11
0002cf 23aa      	TST  R26
0002d0 f432      	BRPL _0x2020043
0002d1 85ea      	LDD  R30,Y+10
0002d2 85fb      	LDD  R31,Y+10+1
0002d3 d1cc      	RCALL __ANEGW1
0002d4 87ea      	STD  Y+10,R30
0002d5 87fb      	STD  Y+10+1,R31
0002d6 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002d7 3040      	CPI  R20,0
0002d8 f011      	BREQ _0x2020044
0002d9 5f1f      	SUBI R17,-LOW(1)
0002da c001      	RJMP _0x2020045
                 _0x2020044:
0002db 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002dc c002      	RJMP _0x2020046
                 _0x2020042:
0002dd d15a      	RCALL SUBOPT_0x1B
0002de d165      	RCALL SUBOPT_0x1E
                 _0x2020046:
                 _0x2020036:
0002df fd00      	SBRC R16,0
0002e0 c010      	RJMP _0x2020047
                 _0x2020048:
0002e1 1715      	CP   R17,R21
0002e2 f470      	BRSH _0x202004A
0002e3 ff07      	SBRS R16,7
0002e4 c008      	RJMP _0x202004B
0002e5 ff02      	SBRS R16,2
0002e6 c004      	RJMP _0x202004C
0002e7 7f0b      	ANDI R16,LOW(251)
0002e8 2f24      	MOV  R18,R20
0002e9 5011      	SUBI R17,LOW(1)
0002ea c001      	RJMP _0x202004D
                 _0x202004C:
0002eb e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002ec c001      	RJMP _0x202004E
                 _0x202004B:
0002ed e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002ee d135      	RCALL SUBOPT_0x17
0002ef 5051      	SUBI R21,LOW(1)
0002f0 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002f1 2f31      	MOV  R19,R17
0002f2 ff01      	SBRS R16,1
0002f3 c014      	RJMP _0x202004F
                 _0x2020050:
0002f4 3030      	CPI  R19,0
0002f5 f089      	BREQ _0x2020052
0002f6 ff03      	SBRS R16,3
0002f7 c005      	RJMP _0x2020053
0002f8 81ee      	LDD  R30,Y+6
0002f9 81ff      	LDD  R31,Y+6+1
0002fa 9125      	LPM  R18,Z+
0002fb d145      	RCALL SUBOPT_0x1D
0002fc c004      	RJMP _0x2020054
                 _0x2020053:
0002fd d123      	RCALL SUBOPT_0x16
0002fe 912d      	LD   R18,X+
0002ff 83ae      	STD  Y+6,R26
000300 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000301 d122      	RCALL SUBOPT_0x17
000302 3050      	CPI  R21,0
000303 f009      	BREQ _0x2020055
000304 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000305 5031      	SUBI R19,LOW(1)
000306 cfed      	RJMP _0x2020050
                 _0x2020052:
000307 c047      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000308 e320      	LDI  R18,LOW(48)
000309 81ee      	LDD  R30,Y+6
00030a 81ff      	LDD  R31,Y+6+1
00030b d1dd      	RCALL __GETW1PF
00030c 87e8      	STD  Y+8,R30
00030d 87f9      	STD  Y+8+1,R31
00030e 81ee      	LDD  R30,Y+6
00030f 81ff      	LDD  R31,Y+6+1
000310 9632      	ADIW R30,2
000311 d12f      	RCALL SUBOPT_0x1D
                 _0x202005A:
000312 85e8      	LDD  R30,Y+8
000313 85f9      	LDD  R31,Y+8+1
000314 85aa      	LDD  R26,Y+10
000315 85bb      	LDD  R27,Y+10+1
000316 17ae      	CP   R26,R30
000317 07bf      	CPC  R27,R31
000318 f050      	BRLO _0x202005C
000319 5f2f      	SUBI R18,-LOW(1)
00031a 85a8      	LDD  R26,Y+8
00031b 85b9      	LDD  R27,Y+8+1
00031c 85ea      	LDD  R30,Y+10
00031d 85fb      	LDD  R31,Y+10+1
00031e 1bea      	SUB  R30,R26
00031f 0bfb      	SBC  R31,R27
000320 87ea      	STD  Y+10,R30
000321 87fb      	STD  Y+10+1,R31
000322 cfef      	RJMP _0x202005A
                 _0x202005C:
000323 332a      	CPI  R18,58
000324 f028      	BRLO _0x202005D
000325 ff03      	SBRS R16,3
000326 c002      	RJMP _0x202005E
000327 5f29      	SUBI R18,-LOW(7)
000328 c001      	RJMP _0x202005F
                 _0x202005E:
000329 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00032a fd04      	SBRC R16,4
00032b c019      	RJMP _0x2020061
00032c 3321      	CPI  R18,49
00032d f420      	BRSH _0x2020063
00032e 85a8      	LDD  R26,Y+8
00032f 85b9      	LDD  R27,Y+8+1
000330 9711      	SBIW R26,1
000331 f409      	BRNE _0x2020062
                 _0x2020063:
000332 c009      	RJMP _0x20200CD
                 _0x2020062:
000333 1753      	CP   R21,R19
000334 f010      	BRLO _0x2020067
000335 ff00      	SBRS R16,0
000336 c001      	RJMP _0x2020068
                 _0x2020067:
000337 c011      	RJMP _0x2020066
                 _0x2020068:
000338 e220      	LDI  R18,LOW(32)
000339 ff07      	SBRS R16,7
00033a c00a      	RJMP _0x2020069
00033b e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00033c 6100      	ORI  R16,LOW(16)
00033d ff02      	SBRS R16,2
00033e c006      	RJMP _0x202006A
00033f 7f0b      	ANDI R16,LOW(251)
000340 934a      	ST   -Y,R20
000341 d0f0      	RCALL SUBOPT_0x1A
000342 3050      	CPI  R21,0
000343 f009      	BREQ _0x202006B
000344 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000345 d0de      	RCALL SUBOPT_0x17
000346 3050      	CPI  R21,0
000347 f009      	BREQ _0x202006C
000348 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000349 5031      	SUBI R19,LOW(1)
00034a 85a8      	LDD  R26,Y+8
00034b 85b9      	LDD  R27,Y+8+1
00034c 9712      	SBIW R26,2
00034d f008      	BRLO _0x2020059
00034e cfb9      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00034f ff00      	SBRS R16,0
000350 c007      	RJMP _0x202006D
                 _0x202006E:
000351 3050      	CPI  R21,0
000352 f029      	BREQ _0x2020070
000353 5051      	SUBI R21,LOW(1)
000354 e2e0      	LDI  R30,LOW(32)
000355 93ea      	ST   -Y,R30
000356 d0db      	RCALL SUBOPT_0x1A
000357 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000358 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000359 cefa      	RJMP _0x2020016
                 _0x2020018:
00035a 85ac      	LDD  R26,Y+12
00035b 85bd      	LDD  R27,Y+12+1
00035c d188      	RCALL __GETW1P
00035d d19f      	RCALL __LOADLOCR6
00035e 9664      	ADIW R28,20
00035f 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000360 92ff      	PUSH R15
000361 2ef8      	MOV  R15,R24
000362 9726      	SBIW R28,6
000363 d196      	RCALL __SAVELOCR2
000364 01de      	MOVW R26,R28
000365 9614      	ADIW R26,4
000366 d135      	RCALL __ADDW2R15
000367 018d      	MOVW R16,R26
000368 e0e0      	LDI  R30,LOW(0)
000369 83ec      	STD  Y+4,R30
00036a 83ed      	STD  Y+4+1,R30
00036b 83ee      	STD  Y+6,R30
00036c 83ef      	STD  Y+6+1,R30
00036d 01de      	MOVW R26,R28
00036e 9618      	ADIW R26,8
00036f d12c      	RCALL __ADDW2R15
000370 d174      	RCALL __GETW1P
000371 d03a      	RCALL SUBOPT_0x0
000372 931a      	ST   -Y,R17
000373 930a      	ST   -Y,R16
000374 e3ee      	LDI  R30,LOW(_put_usart_G101)
000375 e0f2      	LDI  R31,HIGH(_put_usart_G101)
000376 d035      	RCALL SUBOPT_0x0
000377 01de      	MOVW R26,R28
000378 9618      	ADIW R26,8
000379 ded0      	RCALL __print_G101
00037a d186      	RCALL __LOADLOCR2
00037b 9628      	ADIW R28,8
00037c 90ff      	POP  R15
00037d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
00037e 93aa      	ST   -Y,R26
00037f 81e8          ld   r30,y
000380 95e2          swap r30
000381 70ef          andi r30,0xf
000382 2fae          mov  r26,r30
000383 0faa          lsl  r26
000384 0faa          lsl  r26
000385 0fea          add  r30,r26
000386 0fee          lsl  r30
000387 91a9          ld   r26,y+
000388 70af          andi r26,0xf
000389 0fea          add  r30,r26
00038a 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
00038b 93aa      	ST   -Y,R26
00038c 91a9          ld   r26,y+
00038d 27ee          clr  r30
                 bin2bcd0:
00038e 50aa          subi r26,10
00038f f012          brmi bin2bcd1
000390 5fe0          subi r30,-16
000391 cffc          rjmp bin2bcd0
                 bin2bcd1:
000392 5fa6          subi r26,-10
000393 0fea          add  r30,r26
000394 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000395 d088      	RCALL SUBOPT_0x15
000396 91a9          ld   r26,y+
000397 91b9          ld   r27,y+
000398 27ee          clr  r30
000399 27ff          clr  r31
                 strlen0:
00039a 916d          ld   r22,x+
00039b 2366          tst  r22
00039c f011          breq strlen1
00039d 9631          adiw r30,1
00039e cffb          rjmp strlen0
                 strlen1:
00039f 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003a0 d07d      	RCALL SUBOPT_0x15
0003a1 27aa          clr  r26
0003a2 27bb          clr  r27
0003a3 91e9          ld   r30,y+
0003a4 91f9          ld   r31,y+
                 strlenf0:
0003a5 9005      	lpm  r0,z+
0003a6 2000          tst  r0
0003a7 f011          breq strlenf1
0003a8 9611          adiw r26,1
0003a9 cffb          rjmp strlenf0
                 strlenf1:
0003aa 01fd          movw r30,r26
0003ab 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _get_time:
000160           	.BYTE 0x2
                 _set:
000162           	.BYTE 0x1
                 _mode:
000163           	.BYTE 0x1
                 _ring:
000164           	.BYTE 0x1
                 _ring_disp:
000165           	.BYTE 0x1
                 _symbol_S0000003000:
000166           	.BYTE 0x1
                 _disp_S0000004000:
000167           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
0003ac 93fa      	ST   -Y,R31
0003ad 93ea      	ST   -Y,R30
0003ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0003af 2dea      	MOV  R30,R10
0003b0 27ff      	CLR  R31
0003b1 2766      	CLR  R22
0003b2 2777      	CLR  R23
0003b3 d139      	RCALL __PUTPARD1
0003b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0003b5 91e0 0165 	LDS  R30,_ring_disp
0003b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0003b8 91e0 0166 	LDS  R30,_symbol_S0000003000
0003ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0003bb 91a0 0166 	LDS  R26,_symbol_S0000003000
0003bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0003be e0b0      	LDI  R27,0
0003bf e0ea      	LDI  R30,LOW(10)
0003c0 e0f0      	LDI  R31,HIGH(10)
0003c1 d102      	RCALL __DIVW21
0003c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0003c3 b212      	IN   R1,18
0003c4 dff3      	RCALL SUBOPT_0x3
0003c5 5fee      	SUBI R30,-LOW(2)
0003c6 e0a1      	LDI  R26,LOW(1)
0003c7 d0dc      	RCALL __LSLB12
0003c8 29e1      	OR   R30,R1
0003c9 bbe2      	OUT  0x12,R30
0003ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
0003cb e0b0      	LDI  R27,0
0003cc fda7      	SBRC R26,7
0003cd efbf      	SER  R27
0003ce e0f0      	LDI  R31,0
0003cf 17ea      	CP   R30,R26
0003d0 07fb      	CPC  R31,R27
0003d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003d2 e0e0      	LDI  R30,0
0003d3 99b0      	SBIC 0x16,0
0003d4 e0e1      	LDI  R30,1
0003d5 93e0 0162 	STS  _set,R30
0003d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
0003d8 e0e0      	LDI  R30,0
0003d9 99b1      	SBIC 0x16,1
0003da e0e1      	LDI  R30,1
0003db 93e0 0163 	STS  _mode,R30
0003dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
0003de e0e0      	LDI  R30,0
0003df 99b2      	SBIC 0x16,2
0003e0 e0e1      	LDI  R30,1
0003e1 93e0 0164 	STS  _ring,R30
0003e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xB:
0003e4 2de6      	MOV  R30,R6
0003e5 27ff      	CLR  R31
0003e6 2766      	CLR  R22
0003e7 2777      	CLR  R23
0003e8 d104      	RCALL __PUTPARD1
0003e9 2de5      	MOV  R30,R5
0003ea 27ff      	CLR  R31
0003eb 2766      	CLR  R22
0003ec 2777      	CLR  R23
0003ed d0ff      	RCALL __PUTPARD1
0003ee 2de4      	MOV  R30,R4
0003ef 27ff      	CLR  R31
0003f0 2766      	CLR  R22
0003f1 2777      	CLR  R23
0003f2 d0fa      	RCALL __PUTPARD1
0003f3 2de7      	MOV  R30,R7
0003f4 27ff      	CLR  R31
0003f5 2766      	CLR  R22
0003f6 2777      	CLR  R23
0003f7 d0f5      	RCALL __PUTPARD1
0003f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xC:
0003f9 d056      	RCALL _i2c_start
0003fa eda0      	LDI  R26,LOW(208)
0003fb c088      	RJMP _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
0003fc d087      	RCALL _i2c_write
0003fd c061      	RJMP _i2c_stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0003fe d051      	RCALL _i2c_start
0003ff eda1      	LDI  R26,LOW(209)
000400 d083      	RCALL _i2c_write
000401 e0a1      	LDI  R26,LOW(1)
000402 c066      	RJMP _i2c_read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
000403 2fae      	MOV  R26,R30
000404 cf79      	RJMP _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
000405 93ec      	ST   X,R30
000406 e0a1      	LDI  R26,LOW(1)
000407 d061      	RCALL _i2c_read
000408 cffa      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000409 81aa      	LDD  R26,Y+2
00040a 81bb      	LDD  R27,Y+2+1
00040b 93ec      	ST   X,R30
00040c e0a0      	LDI  R26,LOW(0)
00040d d05b      	RCALL _i2c_read
00040e cff4      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
00040f d074      	RCALL _i2c_write
000410 81a8      	LD   R26,Y
000411 df79      	RCALL _bin2bcd
000412 2fae      	MOV  R26,R30
000413 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000414 d06f      	RCALL _i2c_write
000415 81a9      	LDD  R26,Y+1
000416 df74      	RCALL _bin2bcd
000417 2fae      	MOV  R26,R30
000418 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000419 d06a      	RCALL _i2c_write
00041a 81aa      	LDD  R26,Y+2
00041b df6f      	RCALL _bin2bcd
00041c 2fae      	MOV  R26,R30
00041d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
00041e 93ba      	ST   -Y,R27
00041f 93aa      	ST   -Y,R26
000420 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000421 81ae      	LDD  R26,Y+6
000422 81bf      	LDD  R27,Y+6+1
000423 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x17:
000424 932a      	ST   -Y,R18
000425 85ad      	LDD  R26,Y+13
000426 85be      	LDD  R27,Y+13+1
000427 85ef      	LDD  R30,Y+15
000428 89f8      	LDD  R31,Y+15+1
000429 9509      	ICALL
00042a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
00042b 89e8      	LDD  R30,Y+16
00042c 89f9      	LDD  R31,Y+16+1
00042d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x19:
00042e 9734      	SBIW R30,4
00042f 8be8      	STD  Y+16,R30
000430 8bf9      	STD  Y+16+1,R31
000431 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1A:
000432 85ad      	LDD  R26,Y+13
000433 85be      	LDD  R27,Y+13+1
000434 85ef      	LDD  R30,Y+15
000435 89f8      	LDD  R31,Y+15+1
000436 9509      	ICALL
000437 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000438 dff2      	RCALL SUBOPT_0x18
000439 cff4      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1C:
00043a 89a8      	LDD  R26,Y+16
00043b 89b9      	LDD  R27,Y+16+1
00043c 9614      	ADIW R26,4
00043d d0a7      	RCALL __GETW1P
00043e 83ee      	STD  Y+6,R30
00043f 83ff      	STD  Y+6+1,R31
000440 cfe0      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000441 83ee      	STD  Y+6,R30
000442 83ff      	STD  Y+6+1,R31
000443 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
000444 89a8      	LDD  R26,Y+16
000445 89b9      	LDD  R27,Y+16+1
000446 9614      	ADIW R26,4
000447 d09d      	RCALL __GETW1P
000448 87ea      	STD  Y+10,R30
000449 87fb      	STD  Y+10+1,R31
00044a 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=4
                 	.equ __scl_bit=5
                 	.equ __i2c_port=0x15 ;PORTC
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
00044b 98ad      	cbi  __i2c_port,__scl_bit
00044c 98ac      	cbi  __i2c_port,__sda_bit
00044d 9aa5      	sbi  __i2c_dir,__scl_bit
00044e 98a4      	cbi  __i2c_dir,__sda_bit
00044f c015      	rjmp __i2c_delay2
                 _i2c_start:
000450 98a4      	cbi  __i2c_dir,__sda_bit
000451 98a5      	cbi  __i2c_dir,__scl_bit
000452 27ee      	clr  r30
000453 0000      	nop
000454 9b9c      	sbis __i2c_pin,__sda_bit
000455 9508      	ret
000456 9b9d      	sbis __i2c_pin,__scl_bit
000457 9508      	ret
000458 d004      	rcall __i2c_delay1
000459 9aa4      	sbi  __i2c_dir,__sda_bit
00045a d002      	rcall __i2c_delay1
00045b 9aa5      	sbi  __i2c_dir,__scl_bit
00045c e0e1      	ldi  r30,1
                 __i2c_delay1:
00045d e06d      	ldi  r22,13
00045e c007      	rjmp __i2c_delay2l
                 _i2c_stop:
00045f 9aa4      	sbi  __i2c_dir,__sda_bit
000460 9aa5      	sbi  __i2c_dir,__scl_bit
000461 d003      	rcall __i2c_delay2
000462 98a5      	cbi  __i2c_dir,__scl_bit
000463 dff9      	rcall __i2c_delay1
000464 98a4      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000465 e16b      	ldi  r22,27
                 __i2c_delay2l:
000466 956a      	dec  r22
000467 f7f1      	brne __i2c_delay2l
000468 9508      	ret
                 _i2c_read:
000469 e078      	ldi  r23,8
                 __i2c_read0:
00046a 98a5      	cbi  __i2c_dir,__scl_bit
00046b dff1      	rcall __i2c_delay1
                 __i2c_read3:
00046c 9b9d      	sbis __i2c_pin,__scl_bit
00046d cffe      	rjmp __i2c_read3
00046e dfee      	rcall __i2c_delay1
00046f 9488      	clc
000470 999c      	sbic __i2c_pin,__sda_bit
000471 9408      	sec
000472 9aa5      	sbi  __i2c_dir,__scl_bit
000473 dff1      	rcall __i2c_delay2
000474 1fee      	rol  r30
000475 957a      	dec  r23
000476 f799      	brne __i2c_read0
000477 2f7a      	mov  r23,r26
000478 2377      	tst  r23
000479 f411      	brne __i2c_read1
00047a 98a4      	cbi  __i2c_dir,__sda_bit
00047b c001      	rjmp __i2c_read2
                 __i2c_read1:
00047c 9aa4      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
00047d dfdf      	rcall __i2c_delay1
00047e 98a5      	cbi  __i2c_dir,__scl_bit
00047f dfe5      	rcall __i2c_delay2
000480 9aa5      	sbi  __i2c_dir,__scl_bit
000481 dfdb      	rcall __i2c_delay1
000482 98a4      	cbi  __i2c_dir,__sda_bit
000483 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000484 e078      	ldi  r23,8
                 __i2c_write0:
000485 0faa      	lsl  r26
000486 f410      	brcc __i2c_write1
000487 98a4      	cbi  __i2c_dir,__sda_bit
000488 c001      	rjmp __i2c_write2
                 __i2c_write1:
000489 9aa4      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
00048a dfda      	rcall __i2c_delay2
00048b 98a5      	cbi  __i2c_dir,__scl_bit
00048c dfd0      	rcall __i2c_delay1
                 __i2c_write3:
00048d 9b9d      	sbis __i2c_pin,__scl_bit
00048e cffe      	rjmp __i2c_write3
00048f dfcd      	rcall __i2c_delay1
000490 9aa5      	sbi  __i2c_dir,__scl_bit
000491 957a      	dec  r23
000492 f791      	brne __i2c_write0
000493 98a4      	cbi  __i2c_dir,__sda_bit
000494 dfc8      	rcall __i2c_delay1
000495 98a5      	cbi  __i2c_dir,__scl_bit
000496 dfce      	rcall __i2c_delay2
000497 e0e1      	ldi  r30,1
000498 999c      	sbic __i2c_pin,__sda_bit
000499 27ee      	clr  r30
00049a 9aa5      	sbi  __i2c_dir,__scl_bit
00049b cfc1      	rjmp __i2c_delay1
                 
                 __ADDW2R15:
00049c 2400      	CLR  R0
00049d 0daf      	ADD  R26,R15
00049e 1db0      	ADC  R27,R0
00049f 9508      	RET
                 
                 __ANEGW1:
0004a0 95f1      	NEG  R31
0004a1 95e1      	NEG  R30
0004a2 40f0      	SBCI R31,0
0004a3 9508      	RET
                 
                 __LSLB12:
0004a4 23ee      	TST  R30
0004a5 2e0e      	MOV  R0,R30
0004a6 2fea      	MOV  R30,R26
0004a7 f019      	BREQ __LSLB12R
                 __LSLB12L:
0004a8 0fee      	LSL  R30
0004a9 940a      	DEC  R0
0004aa f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0004ab 9508      	RET
                 
                 __LNEGB1:
0004ac 23ee      	TST  R30
0004ad e0e1      	LDI  R30,1
0004ae f009      	BREQ __LNEGB1F
0004af 27ee      	CLR  R30
                 __LNEGB1F:
0004b0 9508      	RET
                 
                 __DIVW21U:
0004b1 2400      	CLR  R0
0004b2 2411      	CLR  R1
0004b3 e190      	LDI  R25,16
                 __DIVW21U1:
0004b4 0faa      	LSL  R26
0004b5 1fbb      	ROL  R27
0004b6 1c00      	ROL  R0
0004b7 1c11      	ROL  R1
0004b8 1a0e      	SUB  R0,R30
0004b9 0a1f      	SBC  R1,R31
0004ba f418      	BRCC __DIVW21U2
0004bb 0e0e      	ADD  R0,R30
0004bc 1e1f      	ADC  R1,R31
0004bd c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004be 60a1      	SBR  R26,1
                 __DIVW21U3:
0004bf 959a      	DEC  R25
0004c0 f799      	BRNE __DIVW21U1
0004c1 01fd      	MOVW R30,R26
0004c2 01d0      	MOVW R26,R0
0004c3 9508      	RET
                 
                 __DIVW21:
0004c4 d012      	RCALL __CHKSIGNW
0004c5 dfeb      	RCALL __DIVW21U
0004c6 f40e      	BRTC __DIVW211
0004c7 dfd8      	RCALL __ANEGW1
                 __DIVW211:
0004c8 9508      	RET
                 
                 __MODW21:
0004c9 94e8      	CLT
0004ca ffb7      	SBRS R27,7
0004cb c004      	RJMP __MODW211
0004cc 95a0      	COM  R26
0004cd 95b0      	COM  R27
0004ce 9611      	ADIW R26,1
0004cf 9468      	SET
                 __MODW211:
0004d0 fdf7      	SBRC R31,7
0004d1 dfce      	RCALL __ANEGW1
0004d2 dfde      	RCALL __DIVW21U
0004d3 01fd      	MOVW R30,R26
0004d4 f40e      	BRTC __MODW212
0004d5 dfca      	RCALL __ANEGW1
                 __MODW212:
0004d6 9508      	RET
                 
                 __CHKSIGNW:
0004d7 94e8      	CLT
0004d8 fff7      	SBRS R31,7
0004d9 c002      	RJMP __CHKSW1
0004da dfc5      	RCALL __ANEGW1
0004db 9468      	SET
                 __CHKSW1:
0004dc ffb7      	SBRS R27,7
0004dd c006      	RJMP __CHKSW2
0004de 95a0      	COM  R26
0004df 95b0      	COM  R27
0004e0 9611      	ADIW R26,1
0004e1 f800      	BLD  R0,0
0004e2 9403      	INC  R0
0004e3 fa00      	BST  R0,0
                 __CHKSW2:
0004e4 9508      	RET
                 
                 __GETW1P:
0004e5 91ed      	LD   R30,X+
0004e6 91fc      	LD   R31,X
0004e7 9711      	SBIW R26,1
0004e8 9508      	RET
                 
                 __GETW1PF:
0004e9 9005      	LPM  R0,Z+
0004ea 91f4      	LPM  R31,Z
0004eb 2de0      	MOV  R30,R0
0004ec 9508      	RET
                 
                 __PUTPARD1:
0004ed 937a      	ST   -Y,R23
0004ee 936a      	ST   -Y,R22
0004ef 93fa      	ST   -Y,R31
0004f0 93ea      	ST   -Y,R30
0004f1 9508      	RET
                 
                 __CPW02:
0004f2 2400      	CLR  R0
0004f3 160a      	CP   R0,R26
0004f4 060b      	CPC  R0,R27
0004f5 9508      	RET
                 
                 __SAVELOCR6:
0004f6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004f7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004f8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004f9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004fa 931a      	ST   -Y,R17
0004fb 930a      	ST   -Y,R16
0004fc 9508      	RET
                 
                 __LOADLOCR6:
0004fd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004fe 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004ff 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000500 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000501 8119      	LDD  R17,Y+1
000502 8108      	LD   R16,Y
000503 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  26 r1 :   9 r2 :   0 r3 :   0 r4 :   7 r5 :   7 r6 :   5 r7 :   8 
r8 :   1 r9 :   1 r10:   9 r11:   1 r12:   5 r13:   2 r14:   0 r15:   6 
r16:  28 r17:  17 r18:  27 r19:   8 r20:   9 r21:  17 r22:  23 r23:  14 
r24:  14 r25:   6 r26: 133 r27:  45 r28:  17 r29:   1 r30: 290 r31:  71 
x  :  21 y  : 164 z  :  13 
Registers used: 32 out of 35 (91.4%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   6 
adiw  :  24 and   :   0 andi  :  11 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  22 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  43 brpl  :   1 brsh  :  10 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :  17 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  38 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 cp    :  15 
cpc   :   4 cpi   :  48 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 in    :  10 
inc   :   6 ld    :  34 ldd   :  67 ldi   : 147 lds   :  16 lpm   :  14 
lsl   :   6 lsr   :   0 mov   :  33 movw  :  14 mul   :   1 muls  :   0 
mulsu :   0 neg   :   2 nop   :   1 or    :   3 ori   :   8 out   :  42 
pop   :   1 push  :   1 rcall : 179 ret   :  55 reti  :   1 rjmp  : 109 
rol   :   4 ror   :   0 sbc   :   2 sbci  :   1 sbi   :  12 sbic  :   9 
sbis  :   5 sbiw  :  12 sbr   :   1 sbrc  :   4 sbrs  :  13 sec   :   1 
seh   :   0 sei   :   1 sen   :   0 ser   :   1 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  60 std   :  25 
sts   :  10 sub   :   2 subi  :  19 swap  :   1 tst   :   7 wdr   :   0 

Instructions used: 68 out of 114 (59.6%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a08   2476     92   2568    8192  31.3%
[.dseg] 0x000060 0x000168      0      8      8    1024   0.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
