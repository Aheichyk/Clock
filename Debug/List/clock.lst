
AVRASM ver. 2.1.30  C:\cvavr\Projects\clock\Debug\List\clock.asm Sun Jan 05 17:45:14 2020

C:\cvavr\Projects\clock\Debug\List\clock.asm(1086): warning: Register r5 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1088): warning: Register r7 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1090): warning: Register r9 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1092): warning: Register r11 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1094): warning: Register r13 already defined by the .DEF directive
C:\cvavr\Projects\clock\Debug\List\clock.asm(1095): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hour=R5
                 	.DEF _min=R4
                 	.DEF _sec=R7
                 	.DEF _week=R6
                 	.DEF _day=R9
                 	.DEF _mon=R8
                 	.DEF _year=R11
                 	.DEF _bt_set=R10
                 	.DEF _get_time=R13
                 	.DEF _set_mode=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c040      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c0a5      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G101:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
00001e 6553
00001f 3a74
000020 6f6d
000021 6564      	.DB  0x53,0x65,0x74,0x3A,0x6D,0x6F,0x64,0x65
000022 253a
000023 0d64
000024 5300
000025 7465      	.DB  0x3A,0x25,0x64,0xD,0x0,0x53,0x65,0x74
000026 7075
000027 000d
000028 2577
000029 5f64      	.DB  0x75,0x70,0xD,0x0,0x77,0x25,0x64,0x5F
00002a 6425
00002b 253a
00002c 3a64
00002d 6425      	.DB  0x25,0x64,0x3A,0x25,0x64,0x3A,0x25,0x64
00002e 000d
00002f 6573
000030 5f74
000031 6f6d      	.DB  0xD,0x0,0x73,0x65,0x74,0x5F,0x6D,0x6F
000032 6564
000033 253a
000034 3a64
000035 7720      	.DB  0x64,0x65,0x3A,0x25,0x64,0x3A,0x20,0x77
000036 6425
000037 255f
000038 3a64
000039 6425      	.DB  0x25,0x64,0x5F,0x25,0x64,0x3A,0x25,0x64
00003a 253a
00003b 0d64
C:\cvavr\Projects\clock\Debug\List\clock.asm(1142): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x3A,0x25,0x64,0xD,0x0
                 
                 __GLOBAL_INI_TBL:
00003d 0004      	.DW  0x04
00003e 000a      	.DW  0x0A
00003f 0038      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c c095      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned char hour,min,sec,week,day,mon,year;
                 ;unsigned char bt_set=0;
                 ;unsigned char get_time=0;
                 ;unsigned char set_mode=0;
                 ;unsigned char set;
                 ;unsigned char mode;
                 ;unsigned char ring;
                 ;
                 ;void set_button() {
                 ; 0000 0015 void set_button() {
                 
                 	.CSEG
                 _set_button:
                 ; .FSTART _set_button
                 ; 0000 0016     printf("Set:mode:%d\r",set_mode);
                +
00006d e3ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00006e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00006f d2bd      	RCALL SUBOPT_0x0
000070 d2bf      	RCALL SUBOPT_0x1
000071 e084      	LDI  R24,4
000072 d26e      	RCALL _printf
000073 9626      	ADIW R28,6
                 ; 0000 0017     if (set_mode==1) {
000074 e0e1      	LDI  R30,LOW(1)
000075 15ec      	CP   R30,R12
000076 f431      	BRNE _0x3
                 ; 0000 0018         hour++;
000077 9453      	INC  R5
                 ; 0000 0019         if (hour > 23) hour=0;
000078 e1e7      	LDI  R30,LOW(23)
000079 15e5      	CP   R30,R5
00007a f408      	BRSH _0x4
00007b 2455      	CLR  R5
                 ; 0000 001A     } else if (set_mode==2) {
                 _0x4:
00007c c01b      	RJMP _0x5
                 _0x3:
00007d e0e2      	LDI  R30,LOW(2)
00007e 15ec      	CP   R30,R12
00007f f431      	BRNE _0x6
                 ; 0000 001B         min++;
000080 9443      	INC  R4
                 ; 0000 001C         if (min > 59)  min=0;
000081 e3eb      	LDI  R30,LOW(59)
000082 15e4      	CP   R30,R4
000083 f408      	BRSH _0x7
000084 2444      	CLR  R4
                 ; 0000 001D     } else if (set_mode==3) {
                 _0x7:
000085 c012      	RJMP _0x8
                 _0x6:
000086 e0e3      	LDI  R30,LOW(3)
000087 15ec      	CP   R30,R12
000088 f431      	BRNE _0x9
                 ; 0000 001E         sec++;
000089 9473      	INC  R7
                 ; 0000 001F         if (sec > 59) sec=0;
00008a e3eb      	LDI  R30,LOW(59)
00008b 15e7      	CP   R30,R7
00008c f408      	BRSH _0xA
00008d 2477      	CLR  R7
                 ; 0000 0020     } else if (set_mode==4) {
                 _0xA:
00008e c009      	RJMP _0xB
                 _0x9:
00008f e0e4      	LDI  R30,LOW(4)
000090 15ec      	CP   R30,R12
000091 f431      	BRNE _0xC
                 ; 0000 0021         week++;
000092 9463      	INC  R6
                 ; 0000 0022         if (week > 7) week=1;
000093 e0e7      	LDI  R30,LOW(7)
000094 15e6      	CP   R30,R6
000095 f410      	BRSH _0xD
000096 e0e1      	LDI  R30,LOW(1)
000097 2e6e      	MOV  R6,R30
                 ; 0000 0023     }
                 _0xD:
                 ; 0000 0024 }
                 _0xC:
                 _0xB:
                 _0x8:
                 _0x5:
000098 9508      	RET
                 ; .FEND
                 ;
                 ;void mode_button() {
                 ; 0000 0026 void mode_button() {
                 _mode_button:
                 ; .FSTART _mode_button
                 ; 0000 0027     printf("Setup\r");
                +
000099 e4e9     +LDI R30 , LOW ( 2 * _0x0 + ( 13 ) )
00009a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW1FN _0x0,13
00009b d291      	RCALL SUBOPT_0x0
00009c e080      	LDI  R24,0
00009d d243      	RCALL _printf
00009e 9622      	ADIW R28,2
                 ; 0000 0028     set_mode++; // Setup clock mode 0 - None,1-Hour,2-Min,3-Sec,4-Week
00009f 94c3      	INC  R12
                 ; 0000 0029     if (set_mode > 4) {
0000a0 e0e4      	LDI  R30,LOW(4)
0000a1 15ec      	CP   R30,R12
0000a2 f450      	BRSH _0xE
                 ; 0000 002A         set_mode=0;
0000a3 24cc      	CLR  R12
                 ; 0000 002B         rtc_set_time(hour,min,sec);
0000a4 925a      	ST   -Y,R5
0000a5 924a      	ST   -Y,R4
0000a6 2da7      	MOV  R26,R7
0000a7 d0ec      	RCALL _rtc_set_time
                 ; 0000 002C         rtc_set_date(week,day,mon,year);
0000a8 926a      	ST   -Y,R6
0000a9 929a      	ST   -Y,R9
0000aa 928a      	ST   -Y,R8
0000ab 2dab      	MOV  R26,R11
0000ac d100      	RCALL _rtc_set_date
                 ; 0000 002D     }
                 ; 0000 002E }
                 _0xE:
0000ad 9508      	RET
                 ; .FEND
                 ;
                 ;void ring_button() {
                 ; 0000 0030 void ring_button() {
                 _ring_button:
                 ; .FSTART _ring_button
                 ; 0000 0031 }
0000ae 9508      	RET
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0034 interrupt [10] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000af 920a      	ST   -Y,R0
0000b0 921a      	ST   -Y,R1
0000b1 92fa      	ST   -Y,R15
0000b2 936a      	ST   -Y,R22
0000b3 937a      	ST   -Y,R23
0000b4 938a      	ST   -Y,R24
0000b5 939a      	ST   -Y,R25
0000b6 93aa      	ST   -Y,R26
0000b7 93ba      	ST   -Y,R27
0000b8 93ea      	ST   -Y,R30
0000b9 93fa      	ST   -Y,R31
0000ba b7ef      	IN   R30,SREG
0000bb 93ea      	ST   -Y,R30
                 ; 0000 0035     // Reinitialize Timer 0 value
                 ; 0000 0036     TCNT0=0xB2;
0000bc ebe2      	LDI  R30,LOW(178)
0000bd bfe2      	OUT  0x32,R30
                 ; 0000 0037     // Place your code here
                 ; 0000 0038     // Read timeout
                 ; 0000 0039     if (get_time > 0) get_time--;
0000be e0e0      	LDI  R30,LOW(0)
0000bf 15ed      	CP   R30,R13
0000c0 f408      	BRSH _0xF
0000c1 94da      	DEC  R13
                 ; 0000 003A     // One touch
                 ; 0000 003B     if (PINB.0 != set) {
                 _0xF:
0000c2 e0a0      	LDI  R26,0
0000c3 99b0      	SBIC 0x16,0
0000c4 e0a1      	LDI  R26,1
0000c5 91e0 0160 	LDS  R30,_set
0000c7 d26e      	RCALL SUBOPT_0x2
0000c8 f031      	BREQ _0x10
                 ; 0000 003C         if (!set) {
0000c9 91e0 0160 	LDS  R30,_set
0000cb 30e0      	CPI  R30,0
0000cc f409      	BRNE _0x11
                 ; 0000 003D             // Button released
                 ; 0000 003E             set_button();
0000cd df9f      	RCALL _set_button
                 ; 0000 003F         }
                 ; 0000 0040         set = PINB.0;
                 _0x11:
0000ce d26e      	RCALL SUBOPT_0x3
                 ; 0000 0041     }
                 ; 0000 0042     // Long touch
                 ; 0000 0043     if (PINB.0 == 0) {
                 _0x10:
0000cf 99b0      	SBIC 0x16,0
0000d0 c008      	RJMP _0x12
                 ; 0000 0044         bt_set++;
0000d1 94a3      	INC  R10
                 ; 0000 0045         if (bt_set > 150) {
0000d2 e9e6      	LDI  R30,LOW(150)
0000d3 15ea      	CP   R30,R10
0000d4 f418      	BRSH _0x13
                 ; 0000 0046             bt_set = 100;
0000d5 e6e4      	LDI  R30,LOW(100)
0000d6 2eae      	MOV  R10,R30
                 ; 0000 0047             set_button();
0000d7 df95      	RCALL _set_button
                 ; 0000 0048         }
                 ; 0000 0049     } else bt_set = 0;
                 _0x13:
0000d8 c001      	RJMP _0x14
                 _0x12:
0000d9 24aa      	CLR  R10
                 ; 0000 004A     // One touch
                 ; 0000 004B     if (PINB.1 != mode) {
                 _0x14:
0000da e0a0      	LDI  R26,0
0000db 99b1      	SBIC 0x16,1
0000dc e0a1      	LDI  R26,1
0000dd 91e0 0161 	LDS  R30,_mode
0000df d256      	RCALL SUBOPT_0x2
0000e0 f031      	BREQ _0x15
                 ; 0000 004C         if (!mode) {
0000e1 91e0 0161 	LDS  R30,_mode
0000e3 30e0      	CPI  R30,0
0000e4 f409      	BRNE _0x16
                 ; 0000 004D             // Button released
                 ; 0000 004E             mode_button();
0000e5 dfb3      	RCALL _mode_button
                 ; 0000 004F         }
                 ; 0000 0050         mode = PINB.1;
                 _0x16:
0000e6 d25c      	RCALL SUBOPT_0x4
                 ; 0000 0051     }
                 ; 0000 0052     // One touch
                 ; 0000 0053     if (PINB.2 != ring) {
                 _0x15:
0000e7 e0a0      	LDI  R26,0
0000e8 99b2      	SBIC 0x16,2
0000e9 e0a1      	LDI  R26,1
0000ea 91e0 0162 	LDS  R30,_ring
0000ec d249      	RCALL SUBOPT_0x2
0000ed f031      	BREQ _0x17
                 ; 0000 0054         if (!ring) {
0000ee 91e0 0162 	LDS  R30,_ring
0000f0 30e0      	CPI  R30,0
0000f1 f409      	BRNE _0x18
                 ; 0000 0055             // Button released
                 ; 0000 0056             ring_button();
0000f2 dfbb      	RCALL _ring_button
                 ; 0000 0057         }
                 ; 0000 0058         ring = PINB.2;
                 _0x18:
0000f3 d255      	RCALL SUBOPT_0x5
                 ; 0000 0059     }
                 ; 0000 005A }
                 _0x17:
0000f4 91e9      	LD   R30,Y+
0000f5 bfef      	OUT  SREG,R30
0000f6 91f9      	LD   R31,Y+
0000f7 91e9      	LD   R30,Y+
0000f8 91b9      	LD   R27,Y+
0000f9 91a9      	LD   R26,Y+
0000fa 9199      	LD   R25,Y+
0000fb 9189      	LD   R24,Y+
0000fc 9179      	LD   R23,Y+
0000fd 9169      	LD   R22,Y+
0000fe 90f9      	LD   R15,Y+
0000ff 9019      	LD   R1,Y+
000100 9009      	LD   R0,Y+
000101 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 005D {
                 _main:
                 ; .FSTART _main
                 ; 0000 005E // Declare your local variables here
                 ; 0000 005F 
                 ; 0000 0060 // Input/Output Ports initialization
                 ; 0000 0061 // Port B initialization
                 ; 0000 0062 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0063 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000102 efe8      	LDI  R30,LOW(248)
000103 bbe7      	OUT  0x17,R30
                 ; 0000 0064 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=1 Bit0=1
                 ; 0000 0065 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000104 e0e7      	LDI  R30,LOW(7)
000105 bbe8      	OUT  0x18,R30
                 ; 0000 0066 
                 ; 0000 0067 // Port C initialization
                 ; 0000 0068 // Function: Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0069 DDRC=(1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000106 e7ef      	LDI  R30,LOW(127)
000107 bbe4      	OUT  0x14,R30
                 ; 0000 006A // State: Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 006B PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000108 e0e0      	LDI  R30,LOW(0)
000109 bbe5      	OUT  0x15,R30
                 ; 0000 006C 
                 ; 0000 006D // Port D initialization
                 ; 0000 006E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 006F DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00010a efef      	LDI  R30,LOW(255)
00010b bbe1      	OUT  0x11,R30
                 ; 0000 0070 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0071 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00010c e0e0      	LDI  R30,LOW(0)
00010d bbe2      	OUT  0x12,R30
                 ; 0000 0072 
                 ; 0000 0073 // Timer/Counter 0 initialization
                 ; 0000 0074 // Clock source: System Clock
                 ; 0000 0075 // Clock value: 7,813 kHz
                 ; 0000 0076 TCCR0=(1<<CS02) | (0<<CS01) | (1<<CS00);
00010e e0e5      	LDI  R30,LOW(5)
00010f bfe3      	OUT  0x33,R30
                 ; 0000 0077 TCNT0=0xB2;
000110 ebe2      	LDI  R30,LOW(178)
000111 bfe2      	OUT  0x32,R30
                 ; 0000 0078 
                 ; 0000 0079 // Timer/Counter 1 initialization
                 ; 0000 007A // Clock source: System Clock
                 ; 0000 007B // Clock value: Timer1 Stopped
                 ; 0000 007C // Mode: Normal top=0xFFFF
                 ; 0000 007D // OC1A output: Disconnected
                 ; 0000 007E // OC1B output: Disconnected
                 ; 0000 007F // Noise Canceler: Off
                 ; 0000 0080 // Input Capture on Falling Edge
                 ; 0000 0081 // Timer1 Overflow Interrupt: Off
                 ; 0000 0082 // Input Capture Interrupt: Off
                 ; 0000 0083 // Compare A Match Interrupt: Off
                 ; 0000 0084 // Compare B Match Interrupt: Off
                 ; 0000 0085 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000112 e0e0      	LDI  R30,LOW(0)
000113 bdef      	OUT  0x2F,R30
                 ; 0000 0086 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000114 bdee      	OUT  0x2E,R30
                 ; 0000 0087 TCNT1H=0x00;
000115 bded      	OUT  0x2D,R30
                 ; 0000 0088 TCNT1L=0x00;
000116 bdec      	OUT  0x2C,R30
                 ; 0000 0089 ICR1H=0x00;
000117 bde7      	OUT  0x27,R30
                 ; 0000 008A ICR1L=0x00;
000118 bde6      	OUT  0x26,R30
                 ; 0000 008B OCR1AH=0x00;
000119 bdeb      	OUT  0x2B,R30
                 ; 0000 008C OCR1AL=0x00;
00011a bdea      	OUT  0x2A,R30
                 ; 0000 008D OCR1BH=0x00;
00011b bde9      	OUT  0x29,R30
                 ; 0000 008E OCR1BL=0x00;
00011c bde8      	OUT  0x28,R30
                 ; 0000 008F 
                 ; 0000 0090 // Timer/Counter 2 initialization
                 ; 0000 0091 // Clock source: System Clock
                 ; 0000 0092 // Clock value: Timer2 Stopped
                 ; 0000 0093 // Mode: Normal top=0xFF
                 ; 0000 0094 // OC2 output: Disconnected
                 ; 0000 0095 ASSR=0<<AS2;
00011d bde2      	OUT  0x22,R30
                 ; 0000 0096 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00011e bde5      	OUT  0x25,R30
                 ; 0000 0097 TCNT2=0x00;
00011f bde4      	OUT  0x24,R30
                 ; 0000 0098 OCR2=0x00;
000120 bde3      	OUT  0x23,R30
                 ; 0000 0099 
                 ; 0000 009A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 009B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
000121 e0e1      	LDI  R30,LOW(1)
000122 bfe9      	OUT  0x39,R30
                 ; 0000 009C 
                 ; 0000 009D // External Interrupt(s) initialization
                 ; 0000 009E // INT0: Off
                 ; 0000 009F // INT1: Off
                 ; 0000 00A0 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000123 e0e0      	LDI  R30,LOW(0)
000124 bfe5      	OUT  0x35,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // USART initialization
                 ; 0000 00A3 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00A4 // USART Receiver: Off
                 ; 0000 00A5 // USART Transmitter: On
                 ; 0000 00A6 // USART Mode: Asynchronous
                 ; 0000 00A7 // USART Baud Rate: 9600
                 ; 0000 00A8 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000125 b9eb      	OUT  0xB,R30
                 ; 0000 00A9 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000126 e0e8      	LDI  R30,LOW(8)
000127 b9ea      	OUT  0xA,R30
                 ; 0000 00AA UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000128 e8e6      	LDI  R30,LOW(134)
000129 bde0      	OUT  0x20,R30
                 ; 0000 00AB UBRRH=0x00;
00012a e0e0      	LDI  R30,LOW(0)
00012b bde0      	OUT  0x20,R30
                 ; 0000 00AC UBRRL=0x33;
00012c e3e3      	LDI  R30,LOW(51)
00012d b9e9      	OUT  0x9,R30
                 ; 0000 00AD 
                 ; 0000 00AE // Analog Comparator initialization
                 ; 0000 00AF // Analog Comparator: Off
                 ; 0000 00B0 // The Analog Comparator's positive input is
                 ; 0000 00B1 // connected to the AIN0 pin
                 ; 0000 00B2 // The Analog Comparator's negative input is
                 ; 0000 00B3 // connected to the AIN1 pin
                 ; 0000 00B4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00012e e8e0      	LDI  R30,LOW(128)
00012f b9e8      	OUT  0x8,R30
                 ; 0000 00B5 SFIOR=(0<<ACME);
000130 e0e0      	LDI  R30,LOW(0)
000131 bfe0      	OUT  0x30,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // ADC initialization
                 ; 0000 00B8 // ADC disabled
                 ; 0000 00B9 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000132 b9e6      	OUT  0x6,R30
                 ; 0000 00BA 
                 ; 0000 00BB // SPI initialization
                 ; 0000 00BC // SPI disabled
                 ; 0000 00BD SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000133 b9ed      	OUT  0xD,R30
                 ; 0000 00BE 
                 ; 0000 00BF // TWI initialization
                 ; 0000 00C0 // TWI disabled
                 ; 0000 00C1 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000134 bfe6      	OUT  0x36,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Bit-Banged I2C Bus initialization
                 ; 0000 00C4 // I2C Port: PORTC
                 ; 0000 00C5 // I2C SDA bit: 4
                 ; 0000 00C6 // I2C SCL bit: 5
                 ; 0000 00C7 // Bit Rate: 100 kHz
                 ; 0000 00C8 // Note: I2C settings are specified in the
                 ; 0000 00C9 // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 00CA i2c_init();
000135 d280      	RCALL _i2c_init
                 ; 0000 00CB 
                 ; 0000 00CC // DS1307 Real Time Clock initialization
                 ; 0000 00CD // Square wave output on pin SQW/OUT: Off
                 ; 0000 00CE // SQW/OUT pin state: 0
                 ; 0000 00CF rtc_init(0,0,0);
000136 e0e0      	LDI  R30,LOW(0)
000137 93ea      	ST   -Y,R30
000138 93ea      	ST   -Y,R30
000139 e0a0      	LDI  R26,LOW(0)
00013a d032      	RCALL _rtc_init
                 ; 0000 00D0 
                 ; 0000 00D1 set = PINB.0;
00013b d201      	RCALL SUBOPT_0x3
                 ; 0000 00D2 mode = PINB.1;
00013c d206      	RCALL SUBOPT_0x4
                 ; 0000 00D3 ring = PINB.2;
00013d d20b      	RCALL SUBOPT_0x5
                 ; 0000 00D4 
                 ; 0000 00D5 // Global enable interrupts
                 ; 0000 00D6 #asm("sei")
00013e 9478      	sei
                 ; 0000 00D7 
                 ; 0000 00D8 while (1) {
                 _0x19:
                 ; 0000 00D9       // Place your code here
                 ; 0000 00DA       if (get_time < 1) {
00013f e0e1      	LDI  R30,LOW(1)
000140 16de      	CP   R13,R30
000141 f548      	BRSH _0x1C
                 ; 0000 00DB             if (!set_mode) {
000142 20cc      	TST  R12
000143 f4e9      	BRNE _0x1D
                 ; 0000 00DC                 rtc_get_time(&hour,&min,&sec);
000144 e0e5      	LDI  R30,LOW(5)
000145 e0f0      	LDI  R31,HIGH(5)
000146 d1e6      	RCALL SUBOPT_0x0
000147 e0e4      	LDI  R30,LOW(4)
000148 e0f0      	LDI  R31,HIGH(4)
000149 d1e3      	RCALL SUBOPT_0x0
00014a e0a7      	LDI  R26,LOW(7)
00014b e0b0      	LDI  R27,HIGH(7)
00014c d036      	RCALL _rtc_get_time
                 ; 0000 00DD                 rtc_get_date(&week,&day,&mon,&year);
00014d e0e6      	LDI  R30,LOW(6)
00014e e0f0      	LDI  R31,HIGH(6)
00014f d1dd      	RCALL SUBOPT_0x0
000150 e0e9      	LDI  R30,LOW(9)
000151 e0f0      	LDI  R31,HIGH(9)
000152 d1da      	RCALL SUBOPT_0x0
000153 e0e8      	LDI  R30,LOW(8)
000154 e0f0      	LDI  R31,HIGH(8)
000155 d1d7      	RCALL SUBOPT_0x0
000156 e0ab      	LDI  R26,LOW(11)
000157 e0b0      	LDI  R27,HIGH(11)
000158 d043      	RCALL _rtc_get_date
                 ; 0000 00DE                 printf("w%d_%d:%d:%d\r",week,hour,min,sec);
                +
000159 e5e0     +LDI R30 , LOW ( 2 * _0x0 + ( 20 ) )
00015a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 20 ) )
                 	__POINTW1FN _0x0,20
00015b d1d1      	RCALL SUBOPT_0x0
00015c d1f2      	RCALL SUBOPT_0x6
00015d e180      	LDI  R24,16
00015e d182      	RCALL _printf
00015f 9662      	ADIW R28,18
                 ; 0000 00DF             } else printf("set_mode:%d: w%d_%d:%d:%d\r",set_mode,week,hour,min,sec);
000160 c008      	RJMP _0x1E
                 _0x1D:
                +
000161 e5ee     +LDI R30 , LOW ( 2 * _0x0 + ( 34 ) )
000162 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW1FN _0x0,34
000163 d1c9      	RCALL SUBOPT_0x0
000164 d1cb      	RCALL SUBOPT_0x1
000165 d1e9      	RCALL SUBOPT_0x6
000166 e184      	LDI  R24,20
000167 d179      	RCALL _printf
000168 9666      	ADIW R28,22
                 ; 0000 00E0             get_time = 100; // 50*10ms = 500ms
                 _0x1E:
000169 e6e4      	LDI  R30,LOW(100)
00016a 2ede      	MOV  R13,R30
                 ; 0000 00E1       }
                 ; 0000 00E2       }
                 _0x1C:
00016b cfd3      	RJMP _0x19
                 ; 0000 00E3 }
                 _0x1F:
00016c cfff      	RJMP _0x1F
                 ; .FEND
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
00016d 93aa      	ST   -Y,R26
00016e 81ea      	LDD  R30,Y+2
00016f 70e3      	ANDI R30,LOW(0x3)
000170 83ea      	STD  Y+2,R30
000171 81e9      	LDD  R30,Y+1
000172 30e0      	CPI  R30,0
000173 f019      	BREQ _0x2000003
000174 81ea      	LDD  R30,Y+2
000175 61e0      	ORI  R30,0x10
000176 83ea      	STD  Y+2,R30
                 _0x2000003:
000177 81e8      	LD   R30,Y
000178 30e0      	CPI  R30,0
000179 f019      	BREQ _0x2000004
00017a 81ea      	LDD  R30,Y+2
00017b 68e0      	ORI  R30,0x80
00017c 83ea      	STD  Y+2,R30
                 _0x2000004:
00017d d1e6      	RCALL SUBOPT_0x7
00017e e0a7      	LDI  R26,LOW(7)
00017f d26f      	RCALL _i2c_write
000180 81aa      	LDD  R26,Y+2
000181 d1e5      	RCALL SUBOPT_0x8
000182 c046      	RJMP _0x20A0001
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000183 93ba      	ST   -Y,R27
000184 93aa      	ST   -Y,R26
000185 d1de      	RCALL SUBOPT_0x7
000186 e0a0      	LDI  R26,LOW(0)
000187 d1df      	RCALL SUBOPT_0x8
000188 d1e0      	RCALL SUBOPT_0x9
000189 d1e4      	RCALL SUBOPT_0xA
00018a 81a8      	LD   R26,Y
00018b 81b9      	LDD  R27,Y+1
00018c d1e3      	RCALL SUBOPT_0xB
00018d d1e6      	RCALL SUBOPT_0xC
00018e 81ac      	LDD  R26,Y+4
00018f 81bd      	LDD  R27,Y+4+1
000190 93ec      	ST   X,R30
000191 d238      	RCALL _i2c_stop
000192 9626      	ADIW R28,6
000193 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
000194 93aa      	ST   -Y,R26
000195 d1ce      	RCALL SUBOPT_0x7
000196 e0a0      	LDI  R26,LOW(0)
000197 d1e2      	RCALL SUBOPT_0xD
000198 d1e6      	RCALL SUBOPT_0xE
000199 d1ea      	RCALL SUBOPT_0xF
00019a d1cc      	RCALL SUBOPT_0x8
00019b c02d      	RJMP _0x20A0001
                 ; .FEND
                 _rtc_get_date:
                 ; .FSTART _rtc_get_date
00019c d1ec      	RCALL SUBOPT_0x10
00019d d1c6      	RCALL SUBOPT_0x7
00019e e0a3      	LDI  R26,LOW(3)
00019f d1c7      	RCALL SUBOPT_0x8
0001a0 d1c8      	RCALL SUBOPT_0x9
0001a1 d1ea      	RCALL SUBOPT_0x11
0001a2 d1cd      	RCALL SUBOPT_0xB
0001a3 81ac      	LDD  R26,Y+4
0001a4 81bd      	LDD  R27,Y+4+1
0001a5 d1ca      	RCALL SUBOPT_0xB
0001a6 d1cd      	RCALL SUBOPT_0xC
0001a7 81a8      	LD   R26,Y
0001a8 81b9      	LDD  R27,Y+1
0001a9 93ec      	ST   X,R30
0001aa d21f      	RCALL _i2c_stop
0001ab 9628      	ADIW R28,8
0001ac 9508      	RET
                 ; .FEND
                 _rtc_set_date:
                 ; .FSTART _rtc_set_date
0001ad 93aa      	ST   -Y,R26
0001ae d1b5      	RCALL SUBOPT_0x7
0001af e0a3      	LDI  R26,LOW(3)
0001b0 d23e      	RCALL _i2c_write
0001b1 81ab      	LDD  R26,Y+3
0001b2 d1d1      	RCALL SUBOPT_0xF
0001b3 d1cb      	RCALL SUBOPT_0xE
0001b4 d1c5      	RCALL SUBOPT_0xD
0001b5 d1b1      	RCALL SUBOPT_0x8
0001b6 9624      	ADIW R28,4
0001b7 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0001b8 93aa      	ST   -Y,R26
                 putchar0:
0001b9 9b5d           sbis usr,udre
0001ba cffe           rjmp putchar0
0001bb 81e8           ld   r30,y
0001bc b9ec           out  udr,r30
0001bd 9621      	ADIW R28,1
0001be 9508      	RET
                 ; .FEND
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
0001bf d1c9      	RCALL SUBOPT_0x10
0001c0 81aa      	LDD  R26,Y+2
0001c1 dff6      	RCALL _putchar
0001c2 81a8      	LD   R26,Y
0001c3 81b9      	LDD  R27,Y+1
0001c4 91ed      	LD   R30,X+
0001c5 91fd      	LD   R31,X+
0001c6 9631      	ADIW R30,1
0001c7 93fe      	ST   -X,R31
0001c8 93ee      	ST   -X,R30
                 _0x20A0001:
0001c9 9623      	ADIW R28,3
0001ca 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001cb d1bd      	RCALL SUBOPT_0x10
0001cc 9726      	SBIW R28,6
0001cd d24e      	RCALL __SAVELOCR6
0001ce e010      	LDI  R17,0
0001cf 85ac      	LDD  R26,Y+12
0001d0 85bd      	LDD  R27,Y+12+1
0001d1 e0e0      	LDI  R30,LOW(0)
0001d2 e0f0      	LDI  R31,HIGH(0)
0001d3 93ed      	ST   X+,R30
0001d4 93fc      	ST   X,R31
                 _0x2020016:
0001d5 89ea      	LDD  R30,Y+18
0001d6 89fb      	LDD  R31,Y+18+1
0001d7 9631      	ADIW R30,1
0001d8 8bea      	STD  Y+18,R30
0001d9 8bfb      	STD  Y+18+1,R31
0001da 9731      	SBIW R30,1
0001db 91e4      	LPM  R30,Z
0001dc 2f2e      	MOV  R18,R30
0001dd 30e0      	CPI  R30,0
0001de f409      	BRNE PC+2
0001df c0fb      	RJMP _0x2020018
0001e0 2fe1      	MOV  R30,R17
0001e1 30e0      	CPI  R30,0
0001e2 f431      	BRNE _0x202001C
0001e3 3225      	CPI  R18,37
0001e4 f411      	BRNE _0x202001D
0001e5 e011      	LDI  R17,LOW(1)
0001e6 c001      	RJMP _0x202001E
                 _0x202001D:
0001e7 d1a7      	RCALL SUBOPT_0x12
                 _0x202001E:
0001e8 c0f1      	RJMP _0x202001B
                 _0x202001C:
0001e9 30e1      	CPI  R30,LOW(0x1)
0001ea f4a1      	BRNE _0x202001F
0001eb 3225      	CPI  R18,37
0001ec f411      	BRNE _0x2020020
0001ed d1a1      	RCALL SUBOPT_0x12
0001ee c0ea      	RJMP _0x20200CC
                 _0x2020020:
0001ef e012      	LDI  R17,LOW(2)
0001f0 e040      	LDI  R20,LOW(0)
0001f1 e000      	LDI  R16,LOW(0)
0001f2 322d      	CPI  R18,45
0001f3 f411      	BRNE _0x2020021
0001f4 e001      	LDI  R16,LOW(1)
0001f5 c0e4      	RJMP _0x202001B
                 _0x2020021:
0001f6 322b      	CPI  R18,43
0001f7 f411      	BRNE _0x2020022
0001f8 e24b      	LDI  R20,LOW(43)
0001f9 c0e0      	RJMP _0x202001B
                 _0x2020022:
0001fa 3220      	CPI  R18,32
0001fb f411      	BRNE _0x2020023
0001fc e240      	LDI  R20,LOW(32)
0001fd c0dc      	RJMP _0x202001B
                 _0x2020023:
0001fe c002      	RJMP _0x2020024
                 _0x202001F:
0001ff 30e2      	CPI  R30,LOW(0x2)
000200 f439      	BRNE _0x2020025
                 _0x2020024:
000201 e050      	LDI  R21,LOW(0)
000202 e013      	LDI  R17,LOW(3)
000203 3320      	CPI  R18,48
000204 f411      	BRNE _0x2020026
000205 6800      	ORI  R16,LOW(128)
000206 c0d3      	RJMP _0x202001B
                 _0x2020026:
000207 c003      	RJMP _0x2020027
                 _0x2020025:
000208 30e3      	CPI  R30,LOW(0x3)
000209 f009      	BREQ PC+2
00020a c0cf      	RJMP _0x202001B
                 _0x2020027:
00020b 3320      	CPI  R18,48
00020c f010      	BRLO _0x202002A
00020d 332a      	CPI  R18,58
00020e f008      	BRLO _0x202002B
                 _0x202002A:
00020f c007      	RJMP _0x2020029
                 _0x202002B:
000210 e0aa      	LDI  R26,LOW(10)
000211 9f5a      	MUL  R21,R26
000212 2d50      	MOV  R21,R0
000213 2fe2      	MOV  R30,R18
000214 53e0      	SUBI R30,LOW(48)
000215 0f5e      	ADD  R21,R30
000216 c0c3      	RJMP _0x202001B
                 _0x2020029:
000217 2fe2      	MOV  R30,R18
000218 36e3      	CPI  R30,LOW(0x63)
000219 f439      	BRNE _0x202002F
00021a d17b      	RCALL SUBOPT_0x13
00021b d17d      	RCALL SUBOPT_0x14
00021c d179      	RCALL SUBOPT_0x13
00021d 81a4      	LDD  R26,Z+4
00021e 93aa      	ST   -Y,R26
00021f d17d      	RCALL SUBOPT_0x15
000220 c0b8      	RJMP _0x2020030
                 _0x202002F:
000221 37e3      	CPI  R30,LOW(0x73)
000222 f429      	BRNE _0x2020032
000223 d17f      	RCALL SUBOPT_0x16
000224 d180      	RCALL SUBOPT_0x17
000225 d0f0      	RCALL _strlen
000226 2f1e      	MOV  R17,R30
000227 c007      	RJMP _0x2020033
                 _0x2020032:
000228 37e0      	CPI  R30,LOW(0x70)
000229 f449      	BRNE _0x2020035
00022a d178      	RCALL SUBOPT_0x16
00022b d179      	RCALL SUBOPT_0x17
00022c d0f4      	RCALL _strlenf
00022d 2f1e      	MOV  R17,R30
00022e 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00022f 6002      	ORI  R16,LOW(2)
000230 770f      	ANDI R16,LOW(127)
000231 e030      	LDI  R19,LOW(0)
000232 c02d      	RJMP _0x2020036
                 _0x2020035:
000233 36e4      	CPI  R30,LOW(0x64)
000234 f011      	BREQ _0x2020039
000235 36e9      	CPI  R30,LOW(0x69)
000236 f411      	BRNE _0x202003A
                 _0x2020039:
000237 6004      	ORI  R16,LOW(4)
000238 c002      	RJMP _0x202003B
                 _0x202003A:
000239 37e5      	CPI  R30,LOW(0x75)
00023a f429      	BRNE _0x202003C
                 _0x202003B:
00023b e2e6      	LDI  R30,LOW(_tbl10_G101*2)
00023c e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00023d d16e      	RCALL SUBOPT_0x18
00023e e015      	LDI  R17,LOW(5)
00023f c00b      	RJMP _0x202003D
                 _0x202003C:
000240 35e8      	CPI  R30,LOW(0x58)
000241 f411      	BRNE _0x202003F
000242 6008      	ORI  R16,LOW(8)
000243 c003      	RJMP _0x2020040
                 _0x202003F:
000244 37e8      	CPI  R30,LOW(0x78)
000245 f009      	BREQ PC+2
000246 c092      	RJMP _0x2020071
                 _0x2020040:
000247 e3e0      	LDI  R30,LOW(_tbl16_G101*2)
000248 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000249 d162      	RCALL SUBOPT_0x18
00024a e014      	LDI  R17,LOW(4)
                 _0x202003D:
00024b ff02      	SBRS R16,2
00024c c011      	RJMP _0x2020042
00024d d155      	RCALL SUBOPT_0x16
00024e d160      	RCALL SUBOPT_0x19
00024f 85ab      	LDD  R26,Y+11
000250 23aa      	TST  R26
000251 f432      	BRPL _0x2020043
000252 85ea      	LDD  R30,Y+10
000253 85fb      	LDD  R31,Y+10+1
000254 d1b6      	RCALL __ANEGW1
000255 87ea      	STD  Y+10,R30
000256 87fb      	STD  Y+10+1,R31
000257 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000258 3040      	CPI  R20,0
000259 f011      	BREQ _0x2020044
00025a 5f1f      	SUBI R17,-LOW(1)
00025b c001      	RJMP _0x2020045
                 _0x2020044:
00025c 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00025d c002      	RJMP _0x2020046
                 _0x2020042:
00025e d144      	RCALL SUBOPT_0x16
00025f d14f      	RCALL SUBOPT_0x19
                 _0x2020046:
                 _0x2020036:
000260 fd00      	SBRC R16,0
000261 c010      	RJMP _0x2020047
                 _0x2020048:
000262 1715      	CP   R17,R21
000263 f470      	BRSH _0x202004A
000264 ff07      	SBRS R16,7
000265 c008      	RJMP _0x202004B
000266 ff02      	SBRS R16,2
000267 c004      	RJMP _0x202004C
000268 7f0b      	ANDI R16,LOW(251)
000269 2f24      	MOV  R18,R20
00026a 5011      	SUBI R17,LOW(1)
00026b c001      	RJMP _0x202004D
                 _0x202004C:
00026c e320      	LDI  R18,LOW(48)
                 _0x202004D:
00026d c001      	RJMP _0x202004E
                 _0x202004B:
00026e e220      	LDI  R18,LOW(32)
                 _0x202004E:
00026f d11f      	RCALL SUBOPT_0x12
000270 5051      	SUBI R21,LOW(1)
000271 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000272 2f31      	MOV  R19,R17
000273 ff01      	SBRS R16,1
000274 c014      	RJMP _0x202004F
                 _0x2020050:
000275 3030      	CPI  R19,0
000276 f089      	BREQ _0x2020052
000277 ff03      	SBRS R16,3
000278 c005      	RJMP _0x2020053
000279 81ee      	LDD  R30,Y+6
00027a 81ff      	LDD  R31,Y+6+1
00027b 9125      	LPM  R18,Z+
00027c d12f      	RCALL SUBOPT_0x18
00027d c004      	RJMP _0x2020054
                 _0x2020053:
00027e d10d      	RCALL SUBOPT_0x11
00027f 912d      	LD   R18,X+
000280 83ae      	STD  Y+6,R26
000281 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000282 d10c      	RCALL SUBOPT_0x12
000283 3050      	CPI  R21,0
000284 f009      	BREQ _0x2020055
000285 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000286 5031      	SUBI R19,LOW(1)
000287 cfed      	RJMP _0x2020050
                 _0x2020052:
000288 c047      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000289 e320      	LDI  R18,LOW(48)
00028a 81ee      	LDD  R30,Y+6
00028b 81ff      	LDD  R31,Y+6+1
00028c d186      	RCALL __GETW1PF
00028d 87e8      	STD  Y+8,R30
00028e 87f9      	STD  Y+8+1,R31
00028f 81ee      	LDD  R30,Y+6
000290 81ff      	LDD  R31,Y+6+1
000291 9632      	ADIW R30,2
000292 d119      	RCALL SUBOPT_0x18
                 _0x202005A:
000293 85e8      	LDD  R30,Y+8
000294 85f9      	LDD  R31,Y+8+1
000295 85aa      	LDD  R26,Y+10
000296 85bb      	LDD  R27,Y+10+1
000297 17ae      	CP   R26,R30
000298 07bf      	CPC  R27,R31
000299 f050      	BRLO _0x202005C
00029a 5f2f      	SUBI R18,-LOW(1)
00029b 85a8      	LDD  R26,Y+8
00029c 85b9      	LDD  R27,Y+8+1
00029d 85ea      	LDD  R30,Y+10
00029e 85fb      	LDD  R31,Y+10+1
00029f 1bea      	SUB  R30,R26
0002a0 0bfb      	SBC  R31,R27
0002a1 87ea      	STD  Y+10,R30
0002a2 87fb      	STD  Y+10+1,R31
0002a3 cfef      	RJMP _0x202005A
                 _0x202005C:
0002a4 332a      	CPI  R18,58
0002a5 f028      	BRLO _0x202005D
0002a6 ff03      	SBRS R16,3
0002a7 c002      	RJMP _0x202005E
0002a8 5f29      	SUBI R18,-LOW(7)
0002a9 c001      	RJMP _0x202005F
                 _0x202005E:
0002aa 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002ab fd04      	SBRC R16,4
0002ac c019      	RJMP _0x2020061
0002ad 3321      	CPI  R18,49
0002ae f420      	BRSH _0x2020063
0002af 85a8      	LDD  R26,Y+8
0002b0 85b9      	LDD  R27,Y+8+1
0002b1 9711      	SBIW R26,1
0002b2 f409      	BRNE _0x2020062
                 _0x2020063:
0002b3 c009      	RJMP _0x20200CD
                 _0x2020062:
0002b4 1753      	CP   R21,R19
0002b5 f010      	BRLO _0x2020067
0002b6 ff00      	SBRS R16,0
0002b7 c001      	RJMP _0x2020068
                 _0x2020067:
0002b8 c011      	RJMP _0x2020066
                 _0x2020068:
0002b9 e220      	LDI  R18,LOW(32)
0002ba ff07      	SBRS R16,7
0002bb c00a      	RJMP _0x2020069
0002bc e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002bd 6100      	ORI  R16,LOW(16)
0002be ff02      	SBRS R16,2
0002bf c006      	RJMP _0x202006A
0002c0 7f0b      	ANDI R16,LOW(251)
0002c1 934a      	ST   -Y,R20
0002c2 d0da      	RCALL SUBOPT_0x15
0002c3 3050      	CPI  R21,0
0002c4 f009      	BREQ _0x202006B
0002c5 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002c6 d0c8      	RCALL SUBOPT_0x12
0002c7 3050      	CPI  R21,0
0002c8 f009      	BREQ _0x202006C
0002c9 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002ca 5031      	SUBI R19,LOW(1)
0002cb 85a8      	LDD  R26,Y+8
0002cc 85b9      	LDD  R27,Y+8+1
0002cd 9712      	SBIW R26,2
0002ce f008      	BRLO _0x2020059
0002cf cfb9      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002d0 ff00      	SBRS R16,0
0002d1 c007      	RJMP _0x202006D
                 _0x202006E:
0002d2 3050      	CPI  R21,0
0002d3 f029      	BREQ _0x2020070
0002d4 5051      	SUBI R21,LOW(1)
0002d5 e2e0      	LDI  R30,LOW(32)
0002d6 93ea      	ST   -Y,R30
0002d7 d0c5      	RCALL SUBOPT_0x15
0002d8 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002d9 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002da cefa      	RJMP _0x2020016
                 _0x2020018:
0002db 85ac      	LDD  R26,Y+12
0002dc 85bd      	LDD  R27,Y+12+1
0002dd d131      	RCALL __GETW1P
0002de d144      	RCALL __LOADLOCR6
0002df 9664      	ADIW R28,20
0002e0 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0002e1 92ff      	PUSH R15
0002e2 2ef8      	MOV  R15,R24
0002e3 9726      	SBIW R28,6
0002e4 d13b      	RCALL __SAVELOCR2
0002e5 01de      	MOVW R26,R28
0002e6 9614      	ADIW R26,4
0002e7 d11f      	RCALL __ADDW2R15
0002e8 018d      	MOVW R16,R26
0002e9 e0e0      	LDI  R30,LOW(0)
0002ea 83ec      	STD  Y+4,R30
0002eb 83ed      	STD  Y+4+1,R30
0002ec 83ee      	STD  Y+6,R30
0002ed 83ef      	STD  Y+6+1,R30
0002ee 01de      	MOVW R26,R28
0002ef 9618      	ADIW R26,8
0002f0 d116      	RCALL __ADDW2R15
0002f1 d11d      	RCALL __GETW1P
0002f2 d03a      	RCALL SUBOPT_0x0
0002f3 931a      	ST   -Y,R17
0002f4 930a      	ST   -Y,R16
0002f5 ebef      	LDI  R30,LOW(_put_usart_G101)
0002f6 e0f1      	LDI  R31,HIGH(_put_usart_G101)
0002f7 d035      	RCALL SUBOPT_0x0
0002f8 01de      	MOVW R26,R28
0002f9 9618      	ADIW R26,8
0002fa ded0      	RCALL __print_G101
0002fb d12b      	RCALL __LOADLOCR2
0002fc 9628      	ADIW R28,8
0002fd 90ff      	POP  R15
0002fe 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
0002ff 93aa      	ST   -Y,R26
000300 81e8          ld   r30,y
000301 95e2          swap r30
000302 70ef          andi r30,0xf
000303 2fae          mov  r26,r30
000304 0faa          lsl  r26
000305 0faa          lsl  r26
000306 0fea          add  r30,r26
000307 0fee          lsl  r30
000308 91a9          ld   r26,y+
000309 70af          andi r26,0xf
00030a 0fea          add  r30,r26
00030b 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
00030c 93aa      	ST   -Y,R26
00030d 91a9          ld   r26,y+
00030e 27ee          clr  r30
                 bin2bcd0:
00030f 50aa          subi r26,10
000310 f012          brmi bin2bcd1
000311 5fe0          subi r30,-16
000312 cffc          rjmp bin2bcd0
                 bin2bcd1:
000313 5fa6          subi r26,-10
000314 0fea          add  r30,r26
000315 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000316 d072      	RCALL SUBOPT_0x10
000317 91a9          ld   r26,y+
000318 91b9          ld   r27,y+
000319 27ee          clr  r30
00031a 27ff          clr  r31
                 strlen0:
00031b 916d          ld   r22,x+
00031c 2366          tst  r22
00031d f011          breq strlen1
00031e 9631          adiw r30,1
00031f cffb          rjmp strlen0
                 strlen1:
000320 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000321 d067      	RCALL SUBOPT_0x10
000322 27aa          clr  r26
000323 27bb          clr  r27
000324 91e9          ld   r30,y+
000325 91f9          ld   r31,y+
                 strlenf0:
000326 9005      	lpm  r0,z+
000327 2000          tst  r0
000328 f011          breq strlenf1
000329 9611          adiw r26,1
00032a cffb          rjmp strlenf0
                 strlenf1:
00032b 01fd          movw r30,r26
00032c 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _set:
000160           	.BYTE 0x1
                 _mode:
000161           	.BYTE 0x1
                 _ring:
000162           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
00032d 93fa      	ST   -Y,R31
00032e 93ea      	ST   -Y,R30
00032f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000330 2dec      	MOV  R30,R12
000331 27ff      	CLR  R31
000332 2766      	CLR  R22
000333 2777      	CLR  R23
000334 d0e2      	RCALL __PUTPARD1
000335 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000336 e0b0      	LDI  R27,0
000337 fda7      	SBRC R26,7
000338 efbf      	SER  R27
000339 e0f0      	LDI  R31,0
00033a 17ea      	CP   R30,R26
00033b 07fb      	CPC  R31,R27
00033c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
00033d e0e0      	LDI  R30,0
00033e 99b0      	SBIC 0x16,0
00033f e0e1      	LDI  R30,1
000340 93e0 0160 	STS  _set,R30
000342 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000343 e0e0      	LDI  R30,0
000344 99b1      	SBIC 0x16,1
000345 e0e1      	LDI  R30,1
000346 93e0 0161 	STS  _mode,R30
000348 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000349 e0e0      	LDI  R30,0
00034a 99b2      	SBIC 0x16,2
00034b e0e1      	LDI  R30,1
00034c 93e0 0162 	STS  _ring,R30
00034e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6:
00034f 2de6      	MOV  R30,R6
000350 27ff      	CLR  R31
000351 2766      	CLR  R22
000352 2777      	CLR  R23
000353 d0c3      	RCALL __PUTPARD1
000354 2de5      	MOV  R30,R5
000355 27ff      	CLR  R31
000356 2766      	CLR  R22
000357 2777      	CLR  R23
000358 d0be      	RCALL __PUTPARD1
000359 2de4      	MOV  R30,R4
00035a 27ff      	CLR  R31
00035b 2766      	CLR  R22
00035c 2777      	CLR  R23
00035d d0b9      	RCALL __PUTPARD1
00035e 2de7      	MOV  R30,R7
00035f 27ff      	CLR  R31
000360 2766      	CLR  R22
000361 2777      	CLR  R23
000362 d0b4      	RCALL __PUTPARD1
000363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
000364 d056      	RCALL _i2c_start
000365 eda0      	LDI  R26,LOW(208)
000366 c088      	RJMP _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000367 d087      	RCALL _i2c_write
000368 c061      	RJMP _i2c_stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000369 d051      	RCALL _i2c_start
00036a eda1      	LDI  R26,LOW(209)
00036b d083      	RCALL _i2c_write
00036c e0a1      	LDI  R26,LOW(1)
00036d c066      	RJMP _i2c_read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
00036e 2fae      	MOV  R26,R30
00036f cf8f      	RJMP _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
000370 93ec      	ST   X,R30
000371 e0a1      	LDI  R26,LOW(1)
000372 d061      	RCALL _i2c_read
000373 cffa      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000374 81aa      	LDD  R26,Y+2
000375 81bb      	LDD  R27,Y+2+1
000376 93ec      	ST   X,R30
000377 e0a0      	LDI  R26,LOW(0)
000378 d05b      	RCALL _i2c_read
000379 cff4      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00037a d074      	RCALL _i2c_write
00037b 81a8      	LD   R26,Y
00037c df8f      	RCALL _bin2bcd
00037d 2fae      	MOV  R26,R30
00037e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00037f d06f      	RCALL _i2c_write
000380 81a9      	LDD  R26,Y+1
000381 df8a      	RCALL _bin2bcd
000382 2fae      	MOV  R26,R30
000383 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000384 d06a      	RCALL _i2c_write
000385 81aa      	LDD  R26,Y+2
000386 df85      	RCALL _bin2bcd
000387 2fae      	MOV  R26,R30
000388 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000389 93ba      	ST   -Y,R27
00038a 93aa      	ST   -Y,R26
00038b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00038c 81ae      	LDD  R26,Y+6
00038d 81bf      	LDD  R27,Y+6+1
00038e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x12:
00038f 932a      	ST   -Y,R18
000390 85ad      	LDD  R26,Y+13
000391 85be      	LDD  R27,Y+13+1
000392 85ef      	LDD  R30,Y+15
000393 89f8      	LDD  R31,Y+15+1
000394 9509      	ICALL
000395 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000396 89e8      	LDD  R30,Y+16
000397 89f9      	LDD  R31,Y+16+1
000398 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x14:
000399 9734      	SBIW R30,4
00039a 8be8      	STD  Y+16,R30
00039b 8bf9      	STD  Y+16+1,R31
00039c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x15:
00039d 85ad      	LDD  R26,Y+13
00039e 85be      	LDD  R27,Y+13+1
00039f 85ef      	LDD  R30,Y+15
0003a0 89f8      	LDD  R31,Y+15+1
0003a1 9509      	ICALL
0003a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0003a3 dff2      	RCALL SUBOPT_0x13
0003a4 cff4      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x17:
0003a5 89a8      	LDD  R26,Y+16
0003a6 89b9      	LDD  R27,Y+16+1
0003a7 9614      	ADIW R26,4
0003a8 d066      	RCALL __GETW1P
0003a9 83ee      	STD  Y+6,R30
0003aa 83ff      	STD  Y+6+1,R31
0003ab cfe0      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0003ac 83ee      	STD  Y+6,R30
0003ad 83ff      	STD  Y+6+1,R31
0003ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
0003af 89a8      	LDD  R26,Y+16
0003b0 89b9      	LDD  R27,Y+16+1
0003b1 9614      	ADIW R26,4
0003b2 d05c      	RCALL __GETW1P
0003b3 87ea      	STD  Y+10,R30
0003b4 87fb      	STD  Y+10+1,R31
0003b5 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=4
                 	.equ __scl_bit=5
                 	.equ __i2c_port=0x15 ;PORTC
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0003b6 98ad      	cbi  __i2c_port,__scl_bit
0003b7 98ac      	cbi  __i2c_port,__sda_bit
0003b8 9aa5      	sbi  __i2c_dir,__scl_bit
0003b9 98a4      	cbi  __i2c_dir,__sda_bit
0003ba c015      	rjmp __i2c_delay2
                 _i2c_start:
0003bb 98a4      	cbi  __i2c_dir,__sda_bit
0003bc 98a5      	cbi  __i2c_dir,__scl_bit
0003bd 27ee      	clr  r30
0003be 0000      	nop
0003bf 9b9c      	sbis __i2c_pin,__sda_bit
0003c0 9508      	ret
0003c1 9b9d      	sbis __i2c_pin,__scl_bit
0003c2 9508      	ret
0003c3 d004      	rcall __i2c_delay1
0003c4 9aa4      	sbi  __i2c_dir,__sda_bit
0003c5 d002      	rcall __i2c_delay1
0003c6 9aa5      	sbi  __i2c_dir,__scl_bit
0003c7 e0e1      	ldi  r30,1
                 __i2c_delay1:
0003c8 e06d      	ldi  r22,13
0003c9 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0003ca 9aa4      	sbi  __i2c_dir,__sda_bit
0003cb 9aa5      	sbi  __i2c_dir,__scl_bit
0003cc d003      	rcall __i2c_delay2
0003cd 98a5      	cbi  __i2c_dir,__scl_bit
0003ce dff9      	rcall __i2c_delay1
0003cf 98a4      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0003d0 e16b      	ldi  r22,27
                 __i2c_delay2l:
0003d1 956a      	dec  r22
0003d2 f7f1      	brne __i2c_delay2l
0003d3 9508      	ret
                 _i2c_read:
0003d4 e078      	ldi  r23,8
                 __i2c_read0:
0003d5 98a5      	cbi  __i2c_dir,__scl_bit
0003d6 dff1      	rcall __i2c_delay1
                 __i2c_read3:
0003d7 9b9d      	sbis __i2c_pin,__scl_bit
0003d8 cffe      	rjmp __i2c_read3
0003d9 dfee      	rcall __i2c_delay1
0003da 9488      	clc
0003db 999c      	sbic __i2c_pin,__sda_bit
0003dc 9408      	sec
0003dd 9aa5      	sbi  __i2c_dir,__scl_bit
0003de dff1      	rcall __i2c_delay2
0003df 1fee      	rol  r30
0003e0 957a      	dec  r23
0003e1 f799      	brne __i2c_read0
0003e2 2f7a      	mov  r23,r26
0003e3 2377      	tst  r23
0003e4 f411      	brne __i2c_read1
0003e5 98a4      	cbi  __i2c_dir,__sda_bit
0003e6 c001      	rjmp __i2c_read2
                 __i2c_read1:
0003e7 9aa4      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0003e8 dfdf      	rcall __i2c_delay1
0003e9 98a5      	cbi  __i2c_dir,__scl_bit
0003ea dfe5      	rcall __i2c_delay2
0003eb 9aa5      	sbi  __i2c_dir,__scl_bit
0003ec dfdb      	rcall __i2c_delay1
0003ed 98a4      	cbi  __i2c_dir,__sda_bit
0003ee cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0003ef e078      	ldi  r23,8
                 __i2c_write0:
0003f0 0faa      	lsl  r26
0003f1 f410      	brcc __i2c_write1
0003f2 98a4      	cbi  __i2c_dir,__sda_bit
0003f3 c001      	rjmp __i2c_write2
                 __i2c_write1:
0003f4 9aa4      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0003f5 dfda      	rcall __i2c_delay2
0003f6 98a5      	cbi  __i2c_dir,__scl_bit
0003f7 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0003f8 9b9d      	sbis __i2c_pin,__scl_bit
0003f9 cffe      	rjmp __i2c_write3
0003fa dfcd      	rcall __i2c_delay1
0003fb 9aa5      	sbi  __i2c_dir,__scl_bit
0003fc 957a      	dec  r23
0003fd f791      	brne __i2c_write0
0003fe 98a4      	cbi  __i2c_dir,__sda_bit
0003ff dfc8      	rcall __i2c_delay1
000400 98a5      	cbi  __i2c_dir,__scl_bit
000401 dfce      	rcall __i2c_delay2
000402 e0e1      	ldi  r30,1
000403 999c      	sbic __i2c_pin,__sda_bit
000404 27ee      	clr  r30
000405 9aa5      	sbi  __i2c_dir,__scl_bit
000406 cfc1      	rjmp __i2c_delay1
                 
                 __ADDW2R15:
000407 2400      	CLR  R0
000408 0daf      	ADD  R26,R15
000409 1db0      	ADC  R27,R0
00040a 9508      	RET
                 
                 __ANEGW1:
00040b 95f1      	NEG  R31
00040c 95e1      	NEG  R30
00040d 40f0      	SBCI R31,0
00040e 9508      	RET
                 
                 __GETW1P:
00040f 91ed      	LD   R30,X+
000410 91fc      	LD   R31,X
000411 9711      	SBIW R26,1
000412 9508      	RET
                 
                 __GETW1PF:
000413 9005      	LPM  R0,Z+
000414 91f4      	LPM  R31,Z
000415 2de0      	MOV  R30,R0
000416 9508      	RET
                 
                 __PUTPARD1:
000417 937a      	ST   -Y,R23
000418 936a      	ST   -Y,R22
000419 93fa      	ST   -Y,R31
00041a 93ea      	ST   -Y,R30
00041b 9508      	RET
                 
                 __SAVELOCR6:
00041c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00041d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00041e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00041f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000420 931a      	ST   -Y,R17
000421 930a      	ST   -Y,R16
000422 9508      	RET
                 
                 __LOADLOCR6:
000423 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000424 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000425 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000426 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000427 8119      	LDD  R17,Y+1
000428 8108      	LD   R16,Y
000429 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  13 r1 :   3 r2 :   0 r3 :   0 r4 :   5 r5 :   5 r6 :   5 r7 :   5 
r8 :   1 r9 :   1 r10:   4 r11:   1 r12:   9 r13:   4 r14:   0 r15:   6 
r16:  28 r17:  17 r18:  27 r19:   8 r20:   9 r21:  17 r22:  15 r23:  14 
r24:  14 r25:   4 r26: 102 r27:  34 r28:  17 r29:   1 r30: 247 r31:  56 
x  :  17 y  : 164 z  :  13 
Registers used: 32 out of 35 (91.4%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   5 
adiw  :  21 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   1 brne  :  32 brpl  :   1 brsh  :  10 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  15 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  30 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  16 
cpc   :   2 cpi   :  34 cpse  :   0 dec   :   5 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 in    :   1 
inc   :   6 ld    :  32 ldd   :  67 ldi   : 134 lds   :   6 lpm   :  14 
lsl   :   4 lsr   :   0 mov   :  27 movw  :   8 mul   :   1 muls  :   0 
mulsu :   0 neg   :   2 nop   :   1 or    :   0 ori   :   8 out   :  43 
pop   :   1 push  :   1 rcall : 145 ret   :  42 reti  :   1 rjmp  :  98 
rol   :   1 ror   :   0 sbc   :   1 sbci  :   1 sbi   :  11 sbic  :   9 
sbis  :   5 sbiw  :  10 sbr   :   0 sbrc  :   3 sbrs  :  10 sec   :   1 
seh   :   0 sei   :   1 sen   :   0 ser   :   1 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  58 std   :  25 
sts   :   3 sub   :   1 subi  :  16 swap  :   1 tst   :   5 wdr   :   0 

Instructions used: 60 out of 114 (52.6%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000854   2040     92   2132    8192  26.0%
[.dseg] 0x000060 0x000163      0      3      3    1024   0.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
