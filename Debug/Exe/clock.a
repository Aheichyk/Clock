;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;
;// DS1307 Real Time Clock functions
;#include <ds1307.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;unsigned char hour,min,sec,week,day,mon,year;
;unsigned int bt_set=0;
;unsigned int get_time=0;
;unsigned char set_mode=0;
;unsigned char set;
;unsigned char mode;
;unsigned char ring;
;unsigned char ring_disp=0;
;
;void set_button() {
; 0000 0016 void set_button() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0017     // Long & One touch
; 0000 0018     printf("Set:mode:%d\r",set_mode);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0019     if (set_mode==1) {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001A         hour++;
;PCODE: $0000001C VOL: 0
; 0000 001B         if (hour > 23) hour=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001C     } else if (set_mode==2) {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001D         min++;
;PCODE: $00000027 VOL: 0
; 0000 001E         if (min > 59)  min=0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001F     } else if (set_mode==3) {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0020         sec++;
;PCODE: $00000032 VOL: 0
; 0000 0021         if (sec > 59) sec=0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0022     } else if (set_mode==4) {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0023         week++;
;PCODE: $0000003D VOL: 0
; 0000 0024         if (week > 7) week=1;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0025     }
;PCODE: $00000043 VOL: 0
; 0000 0026 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;void mode_button() {
; 0000 0028 void mode_button() {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0029     // One touch
; 0000 002A     printf("Setup\r");
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002B     set_mode++; // Setup clock mode 0 - None,1-Hour,2-Min,3-Sec,4-Week
;PCODE: $00000053 VOL: 0
; 0000 002C     if (set_mode > 4) {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 002D         set_mode=0;
;PCODE: $00000057 VOL: 0
; 0000 002E         rtc_set_time(hour,min,sec);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 002F         rtc_set_date(week,day,mon,year);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0030     }
; 0000 0031 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;void ring_button() {
; 0000 0033 void ring_button() {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0034     // One touch
; 0000 0035     ring_disp = !ring_disp; // Change display Time\Ring
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0036     if (ring_disp) {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0037         // Read from EEPROM
; 0000 0038     } else {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0039         // Write to EEPROM
; 0000 003A     }
;PCODE: $0000006E VOL: 0
; 0000 003B }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;void display() {
; 0000 003D void display() {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 003E     static char symbol;
; 0000 003F     symbol++;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0040     if (symbol > 5) {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0041         symbol = 0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0042     }
; 0000 0043     //symbol = 5;
; 0000 0044     // OFF display
; 0000 0045     PORTD &= 0x03;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0046     PORTC &= 0xF0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0047     PORTB.7 = 1;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0048 
; 0000 0049     if (symbol == 0) {
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004A         PORTC |= (0x0F & (hour / 10));
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004B     } else if (symbol == 1) {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 004C         PORTC |= (0x0F & (hour % 10));
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 004D         PORTB.7 = 0;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 004E     } else if (symbol == 2) {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 004F         PORTC |= (0x0F & (min / 10));
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0050     } else if (symbol == 3) {
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0051         PORTC |= (0x0F & (min % 10));
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0052     } else if (symbol == 4) {
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0053         PORTC |= (0x0F & (sec / 10));
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0054     } else if (symbol == 5) {
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0055         PORTC |= (0x0F & (sec % 10));
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0056     }
; 0000 0057 
; 0000 0058     if (ring_disp) {
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0059         if (symbol < 4) {
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 005A             PORTD |= (1 << (2 + symbol));
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 005B         }
; 0000 005C     } else {
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 005D         PORTD |= (1 << (2 + symbol));
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 005E         if (symbol == 3) PORTB.7 = 0;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 005F     }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0060 }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
; 0000 0063 interrupt [10] void timer0_ovf_isr(void) {
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0064     // Reinitialize Timer 0 value
; 0000 0065     TCNT0=0x83;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0066     // Place your code here
; 0000 0067     // Read timeout
; 0000 0068     if (get_time > 0) get_time--;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0069     // One touch
; 0000 006A     if (PINB.0 != set) {
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 006B         if (!set) {
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 006C             // Button released
; 0000 006D             set_button();
;PCODE: $00000116 VOL: 0
; 0000 006E         }
; 0000 006F         set = PINB.0;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0070     }
; 0000 0071     // Long touch
; 0000 0072     if (PINB.0 == 0) {
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0073         bt_set++;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0074         if (bt_set > 1500) {
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0075             bt_set = 1000;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0076             set_button();
;PCODE: $00000127 VOL: 0
; 0000 0077         }
; 0000 0078     } else bt_set = 0;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0079     // One touch
; 0000 007A     if (PINB.1 != mode) {
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 007B         if (!mode) {
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 007C             // Button released
; 0000 007D             mode_button();
;PCODE: $00000137 VOL: 0
; 0000 007E         }
; 0000 007F         mode = PINB.1;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0080     }
; 0000 0081     // One touch
; 0000 0082     if (PINB.2 != ring) {
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0083         if (!ring) {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0084             // Button released
; 0000 0085             ring_button();
;PCODE: $00000147 VOL: 0
; 0000 0086         }
; 0000 0087         ring = PINB.2;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0088     }
; 0000 0089     // Display  4ms - one symbol
; 0000 008A     static char disp;
;PCODE: $0000014C VOL: 0
; 0000 008B     disp++;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 008C     if (disp > 3) disp = 0;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 008D     if (disp == 0) display();
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 008E }
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;
;void main(void)
; 0000 0091 {
;PCODE: $0000015E VOL: 0
; 0000 0092 // Declare your local variables here
; 0000 0093 
; 0000 0094 // Input/Output Ports initialization
; 0000 0095 // Port B initialization
; 0000 0096 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0097 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0098 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=1 Bit0=1
; 0000 0099 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 009A 
; 0000 009B // Port C initialization
; 0000 009C // Function: Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 009D DDRC=(1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 009E // State: Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 009F PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00A0 
; 0000 00A1 // Port D initialization
; 0000 00A2 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00A3 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00A4 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00A5 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer/Counter 0 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: 125,000 kHz
; 0000 00AA TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00AB TCNT0=0x83;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00AC 
; 0000 00AD // Timer/Counter 1 initialization
; 0000 00AE // Clock source: System Clock
; 0000 00AF // Clock value: Timer1 Stopped
; 0000 00B0 // Mode: Normal top=0xFFFF
; 0000 00B1 // OC1A output: Disconnected
; 0000 00B2 // OC1B output: Disconnected
; 0000 00B3 // Noise Canceler: Off
; 0000 00B4 // Input Capture on Falling Edge
; 0000 00B5 // Timer1 Overflow Interrupt: Off
; 0000 00B6 // Input Capture Interrupt: Off
; 0000 00B7 // Compare A Match Interrupt: Off
; 0000 00B8 // Compare B Match Interrupt: Off
; 0000 00B9 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00BA TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00BB TCNT1H=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00BC TCNT1L=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00BD ICR1H=0x00;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00BE ICR1L=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00BF OCR1AH=0x00;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00C0 OCR1AL=0x00;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00C1 OCR1BH=0x00;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00C2 OCR1BL=0x00;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00C3 
; 0000 00C4 // Timer/Counter 2 initialization
; 0000 00C5 // Clock source: System Clock
; 0000 00C6 // Clock value: Timer2 Stopped
; 0000 00C7 // Mode: Normal top=0xFF
; 0000 00C8 // OC2 output: Disconnected
; 0000 00C9 ASSR=0<<AS2;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00CA TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00CB TCNT2=0x00;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00CC OCR2=0x00;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00CD 
; 0000 00CE // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00CF TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00D0 
; 0000 00D1 
; 0000 00D2 
; 0000 00D3 // USART initialization
; 0000 00D4 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00D5 // USART Receiver: Off
; 0000 00D6 // USART Transmitter: On
; 0000 00D7 // USART Mode: Asynchronous
; 0000 00D8 // USART Baud Rate: 9600
; 0000 00D9 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00DA UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00DB UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00DC UBRRH=0x00;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00DD UBRRL=0x33;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00DE 
; 0000 00DF 
; 0000 00E0 
; 0000 00E1 
; 0000 00E2 
; 0000 00E3 
; 0000 00E4 // Bit-Banged I2C Bus initialization
; 0000 00E5 // I2C Port: PORTC
; 0000 00E6 // I2C SDA bit: 4
; 0000 00E7 // I2C SCL bit: 5
; 0000 00E8 // Bit Rate: 100 kHz
; 0000 00E9 // Note: I2C settings are specified in the
; 0000 00EA // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 00EB i2c_init();
;PCODE: $00000197 VOL: 0
; 0000 00EC 
; 0000 00ED // DS1307 Real Time Clock initialization
; 0000 00EE // Square wave output on pin SQW/OUT: Off
; 0000 00EF // SQW/OUT pin state: 0
; 0000 00F0 rtc_init(0,0,0);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00F1 
; 0000 00F2 set = PINB.0;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00F3 mode = PINB.1;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00F4 ring = PINB.2;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00F5 
; 0000 00F6 // Global enable interrupts
; 0000 00F7 #asm("sei")
;PCODE: $000001A7 VOL: 0
	sei
;PCODE: $000001A8 VOL: 0
; 0000 00F8 
; 0000 00F9 while (1) {
;PCODE: $000001A9 VOL: 0
; 0000 00FA       // Place your code here
; 0000 00FB       if (get_time == 0) {
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00FC             if (!set_mode && !ring_disp) {
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00FD                 rtc_get_time(&hour,&min,&sec);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00FE                 rtc_get_date(&week,&day,&mon,&year);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00FF                 printf("w%d_%d:%d:%d\r",week,hour,min,sec);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0100             } else printf("set_mode:%d: w%d_%d:%d:%d\r",set_mode,week,hour,min,sec);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0101             get_time = 100; // 500*1ms = 500ms
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0102             //display();
; 0000 0103       }
; 0000 0104       if (ring_disp) {
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0105             sec = 0;
;PCODE: $000001F6 VOL: 0
; 0000 0106       }
; 0000 0107       }
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0108 }
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
