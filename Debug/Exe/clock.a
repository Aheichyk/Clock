;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;
;// DS1307 Real Time Clock functions
;#include <ds1307.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;#define HOUR_M 1
;#define MIN_M 2
;#define SEC_M 3
;#define WEEK_M 4
;unsigned char hour,min,sec,week,day,mon,year,ring_set;
;unsigned int bt_set=0;
;unsigned int get_time=0;
;unsigned char set_mode=0;
;unsigned char set;
;unsigned char mode;
;unsigned char ring;
;unsigned char ring_disp=0;
;
;
;
;void WriteEeprom(unsigned int addr, unsigned char data) {
; 0000 001C void WriteEeprom(unsigned int addr, unsigned char data) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001D   /* Wait for completion of previous write */
; 0000 001E   while(EECR & (1<<EEWE));
;PCODE: $0000000F VOL: 0
;	addr -> Y+1
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001F   /* Set up address and data registers */
; 0000 0020   EEAR = addr;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0021   EEDR = data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0022   /* Write logical one to EEMWE */
; 0000 0023   EECR |= (1<<EEMWE);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0024   /* Start eeprom write by setting EEWE */
; 0000 0025   EECR |= (1<<EEWE);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0026 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;unsigned char ReadEeprom(unsigned int addr) {
; 0000 0028 unsigned char ReadEeprom(unsigned int addr) {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0029   /* Wait for completion of previous write */
; 0000 002A   while(EECR & (1<<EEWE));
;PCODE: $00000023 VOL: 0
;	addr -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002B   /* Set up address register */
; 0000 002C   EEAR = addr;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002D   /* Start eeprom read by writing EERE */
; 0000 002E   EECR |= (1<<EERE);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002F   /* Return data from data register */
; 0000 0030   return EEDR;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0031 }
;PCODE: $00000031 VOL: 0
;
;void buzzer() {
; 0000 0033 void buzzer() {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0034     static unsigned char old_min;
; 0000 0035     if (old_min != min) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0036         // Check buzzer every minute
; 0000 0037         if (ReadEeprom((week-1)*3)) {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0038             // Ring was set
; 0000 0039             unsigned char ring_hour = ReadEeprom((week-1)*3+2);
; 0000 003A             if (ring_hour == hour) {
;PCODE: $00000040 VOL: 0
;	ring_hour -> Y+0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 003B                 unsigned char ring_min = ReadEeprom((week-1)*3+1);
; 0000 003C                 if (ring_min == min) {
;PCODE: $0000004D VOL: 0
;	ring_hour -> Y+1
;	ring_min -> Y+0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 003D                     // BUZZER!!!!! pi pi pi pi
; 0000 003E                 }
; 0000 003F             }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0040         }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0041     }
;PCODE: $0000005E VOL: 0
; 0000 0042     old_min = min;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0043 }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;void set_button() {
; 0000 0045 void set_button() {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0046     // Long & One touch
; 0000 0047     printf("Set:mode:%d\r",set_mode);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0048     if (set_mode==HOUR_M) {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0049         hour++;
;PCODE: $00000073 VOL: 0
; 0000 004A         if (hour > 23) hour=0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 004B     } else if (set_mode==MIN_M) {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004C         min++;
;PCODE: $0000007E VOL: 0
; 0000 004D         if (min > 59)  min=0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004E     } else if (set_mode==SEC_M) {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004F         sec++;
;PCODE: $00000089 VOL: 0
; 0000 0050         if (sec > 59) sec=0;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0051     } else if (set_mode==WEEK_M) {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0052         week++;
;PCODE: $00000094 VOL: 0
; 0000 0053         if (week > 7) week=1;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0054     } else if (ring_disp) {
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0055         ring_set = !ring_set;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0056     }
; 0000 0057 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;void mode_button() {
; 0000 0059 void mode_button() {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 005A     // One touch
; 0000 005B     printf("Setup\r");
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 005C     set_mode++; // Setup clock mode 0 - None,1-Hour,2-Min,3-Sec,4-week
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 005D     if (!ring_disp) {
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 005E         if (set_mode > WEEK_M) {
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 005F             set_mode=0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0060             rtc_set_time(hour,min,sec);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0061             rtc_set_date(week,day,mon,year);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0062         }
; 0000 0063     } else if (ring_disp) {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0064         if (set_mode > MIN_M) {
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0065             set_mode=0;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0066             // Save ring settings to eeprom
; 0000 0067             WriteEeprom((ring_disp-1)*3+1,min);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0068             WriteEeprom((ring_disp-1)*3+2,hour);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0069         }
; 0000 006A     }
;PCODE: $000000E4 VOL: 0
; 0000 006B }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;
;void ring_button() {
; 0000 006D void ring_button() {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 006E     // One touch
; 0000 006F     // Reset setup mode
; 0000 0070     set_mode = 0;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0071     ring_disp++; // None 0, Ring 1,2,3,4,5,6,7
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0072     if (ring_disp > 1) {
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0073         // Save ring set
; 0000 0074         WriteEeprom((ring_disp-2)*3,ring_set);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0075     }
; 0000 0076     if (ring_disp > 7) ring_disp = 0;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0077     // Read ring settings from eeprom
; 0000 0078     if (ring_disp) {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0079         // Read from EEPROM
; 0000 007A         ring_set = ReadEeprom((ring_disp-1)*3);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 007B         min = ReadEeprom((ring_disp-1)*3+1);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 007C         hour = ReadEeprom((ring_disp-1)*3+2);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 007D     }
; 0000 007E }
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;
;void display(unsigned int flashing) {
; 0000 0080 void display(unsigned int flashing) {
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0081     static char symbol;
; 0000 0082     symbol++;
;PCODE: $00000124 VOL: 0
;	flashing -> Y+0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0083     if (symbol > 5) {
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0084         symbol = 0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0085     }
; 0000 0086     //symbol = 5;
; 0000 0087     // OFF display
; 0000 0088     PORTD &= 0x03;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0089     PORTC &= 0xF0;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 008A     PORTB.7 = 1;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 008B 
; 0000 008C     if (symbol == 0) {
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 008D         PORTC |= (0x0F & (hour / 10));
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 008E     } else if (symbol == 1) {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 008F         PORTC |= (0x0F & (hour % 10));
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0090     } else if (symbol == 2) {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0091         PORTC |= (0x0F & (min / 10));
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0092     } else if (symbol == 3) {
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0093         PORTC |= (0x0F & (min % 10));
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0094     } else if (symbol == 4) {
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0095         PORTC |= (0x0F & (sec / 10));
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0096     } else if (symbol == 5) {
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0097         // Show week in last symbol
; 0000 0098         if (set_mode == WEEK_M) {
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0099             PORTC |= (0x0F & (week % 10));
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 009A         } else if (ring_disp) {
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 009B             PORTC |= (0x0F & (ring_disp % 10));
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 009C         } else {
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 009D             PORTC |= (0x0F & (sec % 10));
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 009E         }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 009F     }
; 0000 00A0 
; 0000 00A1     if (symbol == 1) {
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00A2         // Point after hours
; 0000 00A3         PORTB.7 = 0;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00A4     } else if (symbol == 3 && !ring_disp) {
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00A5         // Point after mins
; 0000 00A6         PORTB.7 = 0;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00A7     } else if (symbol == 5 && ring_set) {
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00A8         // Point after secs
; 0000 00A9         PORTB.7 = 0;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00AA     }
; 0000 00AB 
; 0000 00AC     if (flashing < 500) {
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00AD         if (symbol >= 0 && symbol <= 1 && set_mode == HOUR_M) {
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00AE             // Flashing hour
; 0000 00AF             return;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00B0         } else if (symbol >= 2 && symbol <= 3 && set_mode == MIN_M) {
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00B1             // Flashing min
; 0000 00B2             return;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00B3         } else if (symbol >= 4 && symbol <= 5 && set_mode == SEC_M) {
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00B4             // Flashing sec
; 0000 00B5             return;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 00B6         } else if (symbol == 5 && set_mode == WEEK_M) {
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00B7             // Flashing week
; 0000 00B8             return;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 00B9         }
; 0000 00BA     }
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 00BB 
; 0000 00BC     if (set_mode == WEEK_M && symbol < 5) {
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 00BD         // Don't show first 5 symbols
; 0000 00BE         return;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 00BF     }
; 0000 00C0 
; 0000 00C1     if (ring_disp && symbol > 3 && symbol < 5) {
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 00C2         // Don't show last 2 symbols
; 0000 00C3         return;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 00C4     }
; 0000 00C5 
; 0000 00C6     // Next symbol
; 0000 00C7     PORTD |= (1 << (2 + symbol));
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 00C8 }
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
; 0000 00CB interrupt [10] void timer0_ovf_isr(void) {
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 00CC     // Reinitialize Timer 0 value
; 0000 00CD     TCNT0=0x83;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 00CE     // Place your code here
; 0000 00CF     // Read timeout
; 0000 00D0     if (get_time > 0) get_time--;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 00D1     // One touch
; 0000 00D2     if (PINB.0 != set) {
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 00D3         if (!set) {
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 00D4             // Button released
; 0000 00D5             set_button();
;PCODE: $00000251 VOL: 0
; 0000 00D6         }
; 0000 00D7         set = PINB.0;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 00D8     }
; 0000 00D9     // Long touch
; 0000 00DA     if (PINB.0 == 0) {
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 00DB         bt_set++;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 00DC         if (bt_set > 1500) {
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 00DD             bt_set = 1000;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 00DE             set_button();
;PCODE: $00000262 VOL: 0
; 0000 00DF         }
; 0000 00E0     } else bt_set = 0;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 00E1     // One touch
; 0000 00E2     if (PINB.1 != mode) {
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 00E3         if (!mode) {
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 00E4             // Button released
; 0000 00E5             mode_button();
;PCODE: $00000272 VOL: 0
; 0000 00E6         }
; 0000 00E7         mode = PINB.1;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 00E8     }
; 0000 00E9     // One touch
; 0000 00EA     if (PINB.2 != ring) {
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 00EB         if (!ring) {
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 00EC             // Button released
; 0000 00ED             ring_button();
;PCODE: $00000282 VOL: 0
; 0000 00EE         }
; 0000 00EF         ring = PINB.2;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 00F0     }
; 0000 00F1     // Flashing 500ms
; 0000 00F2     static unsigned int flashing;
;PCODE: $00000287 VOL: 0
; 0000 00F3     flashing++;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 00F4     if (flashing > 999) flashing = 0;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 00F5 
; 0000 00F6     // Display  4ms - one symbol
; 0000 00F7     static char disp;
;PCODE: $00000291 VOL: 0
; 0000 00F8     disp++;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 00F9     if (disp > 3) disp = 0;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 00FA     if (disp == 0) display(flashing);
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 00FB 
; 0000 00FC     // Back to time screen
; 0000 00FD     static unsigned long back2time;
;PCODE: $000002A0 VOL: 0
; 0000 00FE     if (ring_disp || set_mode) {
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 00FF         back2time++;
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0100     }
; 0000 0101     if (back2time > 300000) {
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0102         set_mode = 0;
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0103         ring_disp = 0;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 0104         back2time = 0;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 0105     }
; 0000 0106 
; 0000 0107 }
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;
;void main(void)
; 0000 010A {
;PCODE: $000002BB VOL: 0
; 0000 010B // Declare your local variables here
; 0000 010C 
; 0000 010D // Input/Output Ports initialization
; 0000 010E // Port B initialization
; 0000 010F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0110 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0111 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=1 Bit0=1
; 0000 0112 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0113 
; 0000 0114 // Port C initialization
; 0000 0115 // Function: Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0116 DDRC=(1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 0117 // State: Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0118 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 0119 
; 0000 011A // Port D initialization
; 0000 011B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 011C DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 011D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 011E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 011F 
; 0000 0120 // Timer/Counter 0 initialization
; 0000 0121 // Clock source: System Clock
; 0000 0122 // Clock value: 125,000 kHz
; 0000 0123 TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0124 TCNT0=0x83;
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0125 
; 0000 0126 // Timer/Counter 1 initialization
; 0000 0127 // Clock source: System Clock
; 0000 0128 // Clock value: Timer1 Stopped
; 0000 0129 // Mode: Normal top=0xFFFF
; 0000 012A // OC1A output: Disconnected
; 0000 012B // OC1B output: Disconnected
; 0000 012C // Noise Canceler: Off
; 0000 012D // Input Capture on Falling Edge
; 0000 012E // Timer1 Overflow Interrupt: Off
; 0000 012F // Input Capture Interrupt: Off
; 0000 0130 // Compare A Match Interrupt: Off
; 0000 0131 // Compare B Match Interrupt: Off
; 0000 0132 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0133 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0134 TCNT1H=0x00;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 0135 TCNT1L=0x00;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0136 ICR1H=0x00;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0137 ICR1L=0x00;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0138 OCR1AH=0x00;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0139 OCR1AL=0x00;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 013A OCR1BH=0x00;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 013B OCR1BL=0x00;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 013C 
; 0000 013D // Timer/Counter 2 initialization
; 0000 013E // Clock source: System Clock
; 0000 013F // Clock value: Timer2 Stopped
; 0000 0140 // Mode: Normal top=0xFF
; 0000 0141 // OC2 output: Disconnected
; 0000 0142 ASSR=0<<AS2;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0143 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 0144 TCNT2=0x00;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0145 OCR2=0x00;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 0146 
; 0000 0147 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0148 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0149 
; 0000 014A 
; 0000 014B 
; 0000 014C // USART initialization
; 0000 014D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 014E // USART Receiver: Off
; 0000 014F // USART Transmitter: On
; 0000 0150 // USART Mode: Asynchronous
; 0000 0151 // USART Baud Rate: 9600
; 0000 0152 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0153 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0154 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0155 UBRRH=0x00;
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0156 UBRRL=0x33;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 0157 
; 0000 0158 // Bit-Banged I2C Bus initialization
; 0000 0159 // I2C Port: PORTC
; 0000 015A // I2C SDA bit: 4
; 0000 015B // I2C SCL bit: 5
; 0000 015C // Bit Rate: 100 kHz
; 0000 015D // Note: I2C settings are specified in the
; 0000 015E // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 015F i2c_init();
;PCODE: $000002F4 VOL: 0
; 0000 0160 
; 0000 0161 // DS1307 Real Time Clock initialization
; 0000 0162 // Square wave output on pin SQW/OUT: Off
; 0000 0163 // SQW/OUT pin state: 0
; 0000 0164 rtc_init(0,0,0);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 0165 
; 0000 0166 set = PINB.0;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 0167 mode = PINB.1;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 0168 ring = PINB.2;
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0169 
; 0000 016A // Global enable interrupts
; 0000 016B #asm("sei")
;PCODE: $00000304 VOL: 0
	sei
;PCODE: $00000305 VOL: 0
; 0000 016C 
; 0000 016D while (1) {
;PCODE: $00000306 VOL: 0
; 0000 016E       // Place your code here
; 0000 016F       if (get_time == 0) {
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 0170             if (!set_mode && !ring_disp) {
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 0171                 rtc_get_time(&hour,&min,&sec);
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 0172                 rtc_get_date(&week,&day,&mon,&year);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 0173                 buzzer();
;PCODE: $00000322 VOL: 0
; 0000 0174                 printf("w%d_%d:%d:%d\r",week,hour,min,sec);
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0175             } else printf("set_mode:%d: w%d_%d:%d:%d\r",set_mode,week,hour,min,sec);
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 0176             get_time = 100; // 500*1ms = 500ms
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 0177       }
; 0000 0178       }
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0179 }
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
